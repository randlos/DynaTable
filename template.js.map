{"version":3,"file":"template.js","sources":["src/state.js","src/data.js","src/helper/values.js","src/helper/stats.js","src/update.js","src/helper/viz.js","src/helper/options.js","src/draw.js"],"sourcesContent":["var state = {\n\n    // Schriftgroesse\n    schriftgroesse: \"1.2rem\",\n\n    // Sortierung\n    ordering: true,\n\n    // Zeilen Konfigurator\n\n    zeilenOn: true,\n    hauptzeile: \"Hauptzeile\",\n    unterzeile: \"Unterzeile\",\n    hauptzeilen_font_size: \"2.625rem\",\n    unterzeilen_font_size: \"1.25rem\",\n    hauptzeilen_height: \"2.800rem\",\n    unterzeilen_height: \"1.850rem\",\n\n    // Tabellen-Optionen:\n    sortingColumn: \"keine\",\n    sortingOrder: \"asc\",\n    numberOfEntries: 10,\n\n    // Reload\n    reload: 1,\n\n    // DOM-Layout Tabelle\n    layout: 'pitr', // pitr\n\n    // Suche ein-/aus\n    searchswitch: true,\n\n    // Scrolling y\n    yscroll: '602px',\n\n    // Color-Change\n    headerColor: '#dadada',\n    headerSortingColor: \"#000000\",\n\n    // Haupt-Farben\n    Haupt_Farbe: 'green', //\"rgba(211, 45, 32, 1)\",\n    Green: '#6CBA6C',\n    darkGreen: '#45891B',\n    Blue: '#42A8CC',\n    darkBlue: '#036E93',\n\n    // BG-Farben\n    Background_Transparent: \"transparent\",\n    Background_Color_Haupt_opacity: \"rgba(211, 45, 32, 0.5)\",\n\n    // Partei-Farben\n\n    cdu_csu_farbe: '#143d4b',\n    cdu_farbe: '#162129',\n    csu_farbe: '#1782d1',\n    spd_farbe: '#e0341f',\n    afd_farbe: '#00b8e3',\n    fdp_farbe: '#f4d50b',\n    gruene_farbe: '#3bae53',\n    dielinke_farbe: '#a00163',\n    sonstige_parteien_farbe: '#c5cad0',\n    nichtwahler_farbe: '#dce1e0',\n\n    // Suche ein/aus + weitere Optionen\n\n    suchfeld: 'pitr',\n    search_column: 'alle',\n\n    // Quelle\n\n    quelle: '',\n\n    // Images Options\n    imgsize_h: 100,\n    imgsize_w: 100,\n\n    // Bar-Chart-Feature\n    bar_switch: false,\n    bar_column: '', //'C,D'//'D',//\n    color_balken_negative: '#D82217',\n    color_balken_positive: '#6CBA6C',\n\n    // Negative Bars\n\n    negative_bar: true,\n\n    // Nummerformatierung\n    kommastellen: 2\n\n};\n\nexport default state;","var data = {};\nexport default data;","function number_format(data) {\n\n    // if (typeof data == 'string') {\n    //     console.log(\"data is string: \" + data);\n    //     return String(data);\n    // } else\n\n\n    // convert data to string for format manipulation\n    if (typeof data != \"string\") {\n        data = String(data);\n    }\n\n    // exchange . for , to display data in the german way\n    if (data.includes(\".\")) {\n        data = data.replace(\".\", \",\");\n    }\n\n    if (Math.abs(data) >= 10000 && Math.abs(data) <= 1000000) {\n        //console.log(thousand(data));\n        return thousand(data);\n    } else if (Math.abs(data) >= 1000000) {\n        return mio(data);\n    } else if (data < 0) {\n        let minus = data.substring(0, 1);\n        let hundreds = data.substring(1, );\n        return minus + \" \" + hundreds;\n    } else {\n        return data;\n    }\n\n    function thousand(data) {\n        if (data < 0 && Math.abs(data) < 100000) {\n            let thousand_number = data.substring(1, 3);\n            let hundred_number = data.substring(3, 6);\n            return \"- \" + thousand_number + \" \" + hundred_number;\n        } else if (data < 0 && Math.abs(data) > 100000) {\n            let thousand_number = data.substring(1, 4);\n            let hundred_number = data.substring(4, 7);\n            return \"- \" + thousand_number + \" \" + hundred_number;\n        } else if (data > 0 && Math.abs(data) < 100000) {\n            let thousand_number = data.substring(0, 2);\n            let hundred_number = data.substring(2, 5);\n            return thousand_number + \" \" + hundred_number;\n        } else {\n            let thousand_number = data.substring(0, 3);\n            let hundred_number = data.substring(3, 6);\n            return thousand_number + \" \" + hundred_number;\n        }\n\n\n    }\n\n    function mio(data) {\n        //let mio = data.toString();\n        if (data < 0) {\n            let mio_number = data.substring(1, 2);\n            let thousand_number = data.substring(2, 5);\n            let hundred_number = data.substring(5, 8);\n            // console.log(mio_number + \" \" + thousand_number + \" \" + hundred_number);\n            return \"- \" + mio_number + \" \" + thousand_number + \" \" + hundred_number;\n        } else {\n            let mio_number = data.substring(0, 1);\n            let thousand_number = data.substring(1, 4);\n            let hundred_number = data.substring(4, 7);\n            return mio_number + \" \" + thousand_number + \" \" + hundred_number;\n        }\n\n    }\n}\n\nfunction tranlsateSortingAlphaToNumber(alpha) {\n    //console.log(alpha);\n\n    let barchart_column;\n    let columnArray = [];\n\n    let alphaList = [{ number: 1, string: 'A' },\n        { number: 2, string: 'B' },\n        { number: 3, string: 'C' },\n        { number: 4, string: 'D' },\n        { number: 5, string: 'E' },\n        { number: 6, string: 'F' },\n        { number: 7, string: 'G' },\n        { number: 8, string: 'H' },\n        { number: 9, string: 'I' },\n        { number: 10, string: 'J' },\n        { number: 11, string: 'K' },\n        { number: 12, string: 'L' },\n        { number: 13, string: 'M' },\n        { number: 14, string: 'N' },\n        { number: 15, string: 'O' },\n        { number: 16, string: 'P' },\n        { number: 17, string: 'Q' },\n        { number: 18, string: 'R' },\n        { number: 19, string: 'S' },\n        { number: 20, string: 'T' },\n        { number: 21, string: 'U' },\n        { number: 22, string: 'V' },\n        { number: 23, string: 'W' },\n        { number: 24, string: 'X' },\n        { number: 25, string: 'Y' },\n        { number: 26, string: 'Z' }\n    ];\n\n    if (isNaN(alpha)) {\n\n        if (alpha.length > 1) {\n            let state_alpha_list = alpha.split(\",\");\n            let columnlist = [];\n            for (let j = 0; j < state_alpha_list.length; j++) {\n\n                for (let i = 0; i < alphaList.length; i++) {\n                    //console.log(state_alpha_list[j], alphaList[i].string);\n\n                    if (state_alpha_list[j] == alphaList[i].string) {\n                        //console.log(\"Output:\" + alphaList[i].number);\n                        columnlist.push(alphaList[i].number - 1);\n                    }\n                }\n\n            }\n            //console.log(columnlist);\n            //console.log(\"Type Array\" + typeof(columnlist));\n            return columnlist;\n        }\n\n        if (typeof alpha == 'object') {\n            //console.log(\"Alpha Array? \" + typeof alpha);\n\n            for (let key in alpha) {\n                //console.log(alpha[key]);     \n                let i;\n                for (i = 0; i < alphaList.length; i++) {\n                    if (alphaList[i].string == alpha[key]) {\n                        //console.log(\"Output:\" + typeof(alphaList[i].number));\n                        columnArray.push(alphaList[i].number - 1);\n                    };\n                }\n            }\n            //console.log(\"Column Array: \" + \"[\" + columnArray + \"]\");\n            return columnArray;\n        } else {\n            let i;\n            //console.log(\"alpha-Input: \" + alpha);\n            for (i = 0; i < alphaList.length; i++) {\n                if (alphaList[i].string == alpha) {\n                    //console.log(\"Output:\" + alphaList[i].number);\n                    barchart_column = alphaList[i].number - 1;\n                    //console.log(barchart_column);\n                    return barchart_column;\n                };\n            };\n        }\n    } else {\n        //console.log(alpha);\n        return alpha;\n    }\n\n}\n\nfunction getjustnumber(datavalue) {\n\n\n    if (datavalue.includes(\",\")) {\n        datavalue = datavalue.replace(\",\", \".\")\n    }\n    //console.log(datavalue);\n\n    let number = parseFloat(datavalue);\n\n    // Check if datavalue contains only alphabetic-characters to ensure that the search is working for those columns\n    if (datavalue == getjuststring(datavalue)) {\n        //console.log(datavalue);\n        return getjuststring(datavalue);\n\n        if (datavalue == \"keine Angabe\") {\n            return 0;\n        }\n    }\n\n\n    return number;\n}\n\nfunction getjuststring(datavalue) {\n    var str = datavalue;\n    var patt = /[A-Za-z$â‚¬].*/g;\n    var result = str.match(patt);\n\n    // check if result is an object/match and then return the first object/array entry with result[0]\n    if (result) {\n        return String(result[0]);\n    }\n    return result;\n}\n\n\nexport { number_format, tranlsateSortingAlphaToNumber, getjustnumber, getjuststring };","import data from \"../data\";\nimport * as transform from \"./values\";\n\nfunction maxValue(column) {\n    let exp_column = column;\n    let scope_data = data.Data;\n    //console.log(scope_data);\n\n    let dataArray = new Array();\n\n    scope_data.forEach(function(item, index, array) {\n\n        // GET THE LAST ITEM (LAST COLUMN CELL) IN A ARRAY\n        //console.log(item.values.slice(-1)[0], index);\n\n        // Get the active column for bar-charts in Characters, convert it to a number and get the max value of that column\n\n        //console.log(\"Bar Column: \" + exp_column);\n\n        let valueToConsider = transform.getjustnumber(item.values.slice(exp_column)[0]);\n        dataArray.push(valueToConsider);\n        //console.log(valueToConsider)\n\n    });\n\n\n    let maxVal = Math.max.apply(Math, dataArray);\n    //console.log(\"DataArray: \" + dataArray);\n    // console.log(\"InFunction maxValue: \" + maxVal);\n    return maxVal;\n}\n\n\nfunction minValue(column) {\n\n    let exp_column = column;\n    let scope_data = data.Data;\n\n    let dataArray = new Array();\n\n    scope_data.forEach(function(item, index, array) {\n\n        // GET THE LAST ITEM (LAST COLUMN CELL) IN A ARRAY\n        //console.log(item.values.slice(-1)[0], index);\n\n        // Get the active column for bar-charts in Characters, convert it to a number and get the max value of that column\n\n        //console.log(\"Bar Column: \" + exp_column);\n\n        let valueToConsider = transform.getjustnumber(item.values.slice(exp_column)[0]);\n        dataArray.push(valueToConsider);\n        //console.log(valueToConsider)\n\n    });\n\n\n    let minVal = Math.min.apply(Math, dataArray);\n    //console.log(\"DataArray: \" + dataArray);\n\n    return minVal;\n}\n\n\nexport { maxValue, minValue };","import state from \"./state\";\nimport data from \"./data\";\nimport * as transform from \"./helper/values\";\nimport * as stats from \"./helper/stats\";\nimport * as options from \"./helper/options\";\nimport * as viz from \"./helper/viz\";\n\n\nfunction update() {\n\n    function rm_zeile_height(height) {\n\n        // Get zeilen_height while creating zeilen in zeilen():553 / If recieved in this. function, the DOM isn't fully loaded yet \n        let zeilen_height = zeilen();\n        let search_height = document.getElementById(\"search\").clientHeight;\n        let quelle_height = document.getElementById(\"quelle\").clientHeight;\n        let table_height = parseInt(height) - zeilen_height - search_height - quelle_height + \"px\";\n        return table_height;\n    }\n\n    let table = $('#myTable').dataTable({\n        data: data.Data.map(e => e.values),\n        responsive: {\n            details: {\n                type: 'inline',\n                target: 0,\n                // display: $.fn.dataTable.Responsive.display.modal( {\n                //     header: function ( row ) {\n                //         var data = row.data()[0];\n                //         return data;\n                //     }\n                // } )\n            }\n        },\n        \"ordering\": state.ordering,\n        colReorder: {\n            enable: false,\n            //     order: [ 5, 4, 3, 2, 1, 0 ],\n            //     realtime: false,\n\n        },\n        'infoCallback': function(settings, start, end, max, total, pre) {\n\n            // Callback to change information on top of table -> in this particular example: show the number of all entries in the table\n            return start + \" bis \" + end + \" von \" + transform.number_format(max) + \" EintrÃ¤gen\";\n        },\n\n        // \"drawCallback\": function( settings ) {\n        //     let api = this.api();\n        //     // console.log( api.rows( {page:'current'} ).data() );\n        //     //console.log(api.columns( {page:'current'}).data());\n        //     //var api = new $.fn.dataTable.Api( settings );\n\n\n        //     // Output the data for the visible rows to the browser's console\n        //     // You might do something more useful with it!\n        //     //console.log(api.search);\n        //     //console.log( api.rows( {page:'current'} ).data().table );\n\n        //     // $('#mySearch').on( 'keyup', function () {\n        //     //     table.search( this.value );\n        //     // } );\n        // },\n        \"dom\": state.layout,\n        // \"infoCallback\": function(settings, start, end, max, total, pre) {\n        //     var api = this.api();\n        //     var pageInfo = api.page.info();\n        //     var entriesInfo = api;\n        //     console.log(pageInfo);\n        //     console.log(entriesInfo);\n\n\n\n        //     return 'Page ' + (number_format(pageInfo.page + 1)) + ' of ' + number_format(pageInfo.pages);\n        // },\n        // buttons: [\n        //     {\n        //         extend: 'columnsToggle',\n        //     }\n        // ],\n        //responsive: true,\n        //\"autoWidth\": true,\n        \"columnDefs\": [{\n                \"targets\": 0,\n                \"data\": 0,\n                \"render\": function(data, type, row, meta) {\n                    return viz.show_img(data, type, row, meta);\n                },\n            },\n            {\n                \"targets\": viz.without_bar(transform.tranlsateSortingAlphaToNumber(state.bar_column), data),\n                \"render\": function(data, type, row, meta) {\n                    return viz.without_viz(data, type, row, meta);\n                }\n            },\n            {\n                \"targets\": transform.tranlsateSortingAlphaToNumber(state.bar_column),\n                \"render\": function(data, type, row, meta) {\n                    return viz.barchart(data, type, row, meta);\n                }\n\n            }\n        ],\n        \"paging\": false,\n        \"scrollY\": rm_zeile_height(state.yscroll),\n        //\"scrollCollapse\": true,\n        \"pageLength\": state.numberOfEntries,\n        \"order\": options.sortingswitch(state.sortingColumn, state.sortingOrder), //[transform.tranlsateSortingAlphaToNumber(state.sortingColumn), state.sortingOrder],\n        columns: options.c_names(),\n        \"language\": {\n            \"url\": \"//cdn.datatables.net/plug-ins/1.10.19/i18n/German.json\"\n        },\n        \"drawCallback\": function(settings) {\n            if (state.sortingColumn)\n            // Change Header Color\n                $('.dataTables_scrollHead').css(\"background\", state.headerColor);\n            //$('.dataTables_scrollHead th.sorting_desc').css(\"background-color\", state.headerSortingColor);          \n\n        }\n    });\n\n\n    // Responsive Configuration\n    // $(\".addbtn\").on('click',function(){\n    //     var data = table.row(0).data();\n    //     data[3] = \"<button type='button' class='btn btn-info btn-xs' style='font-size: 9px;'>New BtN</button>\";\n    //     table.row(0).data(data);\n    //     table.draw();\n    //   });\n    // console.log(getOrderedColumn(table));\n\n    $('#mySearch').on('keyup', function() {\n        let searcher_var = state.search_column;\n        let count_search_column = searcher_var.length - 1;\n\n        let all = $('#myTable').DataTable().columns()[0]\n\n\n        if (state.search_column == \"alle\") {\n\n            $('#myTable').DataTable().search(this.value).columns(all).draw();\n        } else if (count_search_column < 1) {\n            $('#myTable').DataTable().columns(transform.tranlsateSortingAlphaToNumber(state.search_column)).search(this.value).draw();\n        } else {\n            $('#myTable').DataTable().search(this.value).draw();\n\n        }\n    });\n\n    // Deactivate Search for Grafik PNG Export\n    function deactivateSearch() {\n        if (!state.searchswitch) {\n            $('#mySearch').remove();\n        }\n    }\n\n    deactivateSearch();\n\n\n    // SchriftgrÃ¶sse anpassen\n\n    function mod_font() {\n        $('.table.dataTable thead th').css(\"font-size\", state.schriftgroesse)\n        $('.table.dataTable thead td').css(\"font-size\", state.schriftgroesse)\n        $('.table.dataTable tbody th').css(\"font-size\", state.schriftgroesse)\n        $('.table.dataTable tbody td ').css(\"font-size\", state.schriftgroesse)\n    }\n\n    window.onload = mod_font();\n\n    // Zeilen\n\n    function zeilen() {\n\n        if (state.zeilenOn == true) {\n            $('#zeilen').css(\"display\", \"block\");\n            $('#hauptzeile').text(state.hauptzeile);\n            $('#unterzeile').text(state.unterzeile);\n\n            $('#hauptzeile').css(\"font-size\", state.hauptzeilen_font_size);\n            $('#unterzeile').css(\"font-size\", state.unterzeilen_font_size);\n\n            $('#hauptzeile').css(\"line-height\", state.hauptzeilen_height);\n            $('#unterzeile').css(\"line-height\", state.unterzeilen_height);\n\n        } else {\n            $('#zeilen').css(\"display\", \"none\");\n        }\n\n        let zeilen_height = document.getElementById(\"zeilen\").clientHeight;\n        return zeilen_height;\n    }\n\n    zeilen();\n\n    // Quelle\n\n    function quelle() {\n        if (state.quelle) {\n            $('#quelle').text(state.quelle);\n        }\n\n    }\n\n\n    quelle();\n\n    // Reloading Problem\n\n    $(\"iframe[name='preview']\").each(function() {\n        this.sandbox += ' allow-modals';\n    });\n\n}\n\nexport default update;","import update from \"../update\";\nimport state from \"../state\";\nimport * as transform from \"../helper/values\";\nimport * as stats from \"../helper/stats\";\n\n//import * as viz from \"./helper/viz\";\n\n// Show Clean Data without viz\n\nfunction without_viz(data, type, row, meta) {\n    if (type == \"display\") {\n        return transform.number_format(data);\n    }\n    return transform.getjustnumber(data);\n}\n\n\n// Show image in column\n\nfunction show_img(data, type, row, meta) {\n    if (data.indexOf(\"https://\") > -1) {\n        var img_tag = '<img src=\"' + data + '\"height=\"' + state.imgsize_h + '\"width=\"' + state.imgsize_w + '\">';\n        //console.log(\"height: \" + state.imgsize[0] + \", width: \" + state.imgsize[1]);\n        return img_tag;\n    } else {\n        return data;\n    }\n}\n\n// Barcharts\n\nfunction barchart(data, type, row, meta) {\n    //console.log(state.bar_column);\n    //console.log(transform.tranlsateSortingAlphaToNumber(state.bar_column));\n    let maxVal = stats.maxValue(meta.col);\n    let minVal = stats.minValue(meta.col);\n    //console.log(\"MinValue: \" + minVal);\n    let rangeMax = maxVal - minVal;\n    //console.log(\"rangeMax: \" + rangeMax);\n\n    // Adjust the max to 100% and distribute to min\n    let maxNormalize = (Math.abs(transform.getjustnumber(data)) / maxVal) * 100;\n    // ((data - minVal+1)/rangeMax) * 100 --> Get the difference between the actual data-value and the range to map the data from minValue = 1 (+1) to maxValue = 100 (+1)\n    let minMaxNormalize_plus = ((Math.abs(transform.getjustnumber(data)) - minVal) / rangeMax) * 90;\n    let minMaxNoralize_minus = ((Math.abs(transform.getjustnumber(data)) - minVal) / rangeMax) * 53;\n\n\n    // console.log(\"input: \" + Math.abs(getjustnumber(data)));\n    //console.log(\"minVal: \" + minVal);\n    //console.log(\"output: \" + (Math.abs(getjustnumber(data)) - Math.abs(minVal)));\n    // console.log(\"____\");\n    // console.log(\"minMaxNormalized: \" + minMaxNormalize_plus);\n    // console.log(\"rangeMax: \" + rangeMax);\n    // console.log(\"____\");\n\n\n    // console.log(\"maxValue: \" + maxVal);\n    // console.log(\"minValue: \" + minVal);\n    // console.log(\"minMaxNoralize: \" + minMaxNormalize);\n\n    //let bar_data = Math.abs(getjustnumber(data));\n\n    //getjuststring(data);\n\n\n    //console.log(\"Max Value in function: \" + maxVal);\n    if (type == \"display\") {\n        if (state.bar_switch) { //\n            if (isNaN(transform.getjustnumber(data))) {\n                //console.log(\"data is not a number\");\n                return String(data);\n\n            } else if (state.negative_bar) {\n                let pre_bar_container = '<div class=\"barcont\">';\n\n                let lefttd_start = '<div class=\"leftbar\">';\n                let lefttd_end = '</div>';\n                let righttd_start = '<div class=\"rightbar\">';\n                let righttd_end = '</div>';\n\n\n\n                let left_content = '<p style=\"text-align:right;margin:0 4px 0 0;\">' + transform.number_format(data) + '</p>';\n                let right_content = '<p style=\"text-align:left;margin:0 0 0 4px;\">' + transform.number_format(data) + '</p>';\n\n                // \n\n                let right_bar = '<div class=\"bardiv\"> <span class=\"bar\" style=\"height:19px;margin: 3px 0 0 0;width:' + minMaxNoralize_minus + '%; background: ' + state.color_balken_positive + '\"></span></div>';\n                let left_bar = '<div class=\"bardiv\"> <span class=\"bar\" style=\"float:right;margin:0;height:20px;margin: 3px 1px 0 0;width:' + minMaxNoralize_minus + '%; background:' + state.color_balken_negative + '\"></span></div>';\n\n                let post_bar_container = '</div>';\n\n\n                let zerovalue = pre_bar_container + '<p style=\"text-align: center; margin:0;\">' + data + '</p>' + post_bar_container;\n                let positive = pre_bar_container + lefttd_start + left_content + lefttd_end + righttd_start + right_bar + righttd_end + post_bar_container;\n                let negative = pre_bar_container + lefttd_start + left_bar + lefttd_end + righttd_start + right_content + righttd_end + post_bar_container;\n\n                if (transform.getjustnumber(data) < 0) {\n                    //console.log(Math.abs(getjustnumber(data)));  \n                    return negative;\n                } else if (transform.getjustnumber(data) == 0) {\n                    return zerovalue;\n                } else {\n                    return positive\n                }\n\n\n            } else {\n                let pre_bar_container = '<div class=\"barcont\">';\n                let bartext = '<div class=\"bartext\"><p style=\"color:#000000\">' + data + '</p></div>';\n                // if (transform.getjustnumber(data) < 0) {\n                //     let bar = '<div class=\"bardiv\"> <span class=\"bar\" style=\"height:20px;width:' + rangeMax + '%;background: #DD0000\"></span></div>';\n                // }\n                //console.log(\"Test minMaxNormalize\" + minMaxNormalize);\n\n                // BARCHART WITH DIV\n                let bar = '<div class=\"bardiv\"> <span class=\"bar\" style=\"lheight:20px;width:' + minMaxNormalize_plus + '%; background:' + state.color_balken_positive + '\"></span></div>';\n                // viz.colorMapBalken(data, minVal, maxVal)  / console.log(maxNormalize);\n                let post_bar_container = '</div>';\n\n                return pre_bar_container + bar + bartext + post_bar_container;\n            }\n        } else {\n            return transform.number_format(data);\n        }\n    }\n\n    return transform.getjustnumber(data);\n\n\n}\n\n// Viz helper\nfunction without_bar(number, data) {\n    let value_array = data.Data[0].values;\n    let key_array = new Array();\n    let column_array = new Array();\n\n    for (let index in value_array) {\n        key_array.push(parseInt(index))\n    }\n\n    if (typeof number == 'number') {\n        number = [number];\n        // console.log(typeof number);\n    }\n\n    // console.log(\"Number: \" + number);\n    // console.log(\"Value_array: \" + value_array.keys());\n    // console.log(\"Keys Array: \" + key_array);\n\n    column_array = key_array.filter(val => !number.includes(val))\n        //console.log(column_array);\n    return column_array;\n}\n\n\nfunction colorMapBalken(data, minVal, maxVal) {\n\n    let color = d3.scaleLinear()\n        .domain([minVal, maxVal])\n        .interpolate(d3.interpolateHsl)\n        .range([\"white\", \"#D82217\"]);\n\n    return color(data);\n\n}\n\n\nlet colortestdata = [2, 4, 7, 8, 14, 55, 66, 99];\n// console.log(colortestdata.length);\n// console.log(colorMapBalken(colortestdata));\n\n\nexport { without_viz, show_img, barchart, without_bar, colorMapBalken };","import data from \"../data\";\nimport * as transform from \"./values\";\n\n// Get Column-Names\n\nfunction c_names() {\n    let column_data = [];\n    for (var i = 0; i < data.Data.column_names.values.length; i++) {\n        column_data.push({ \"title\": data.Data.column_names.values[i] });\n    };\n    //console.log(column_data);\n    return column_data;\n}\n\n//Switch Sorting from all to specific columns\n\nfunction sortingswitch(sortingColumn, sortingOrder) {\n    if (sortingColumn == 'keine') {\n        return new Array();\n    } else {\n        let column = transform.tranlsateSortingAlphaToNumber(sortingColumn);\n        let output = [column, sortingOrder];\n        return output;\n    }\n}\n\nexport { c_names, sortingswitch };","import update from \"./update\";\nimport state from \"./state\";\n\n\nfunction draw() {\n    // The draw function is called when the template first loads\n    update();\n}\n\nexport default draw;"],"names":["state","schriftgroesse","ordering","zeilenOn","hauptzeile","unterzeile","hauptzeilen_font_size","unterzeilen_font_size","hauptzeilen_height","unterzeilen_height","sortingColumn","sortingOrder","numberOfEntries","reload","layout","searchswitch","yscroll","headerColor","headerSortingColor","Haupt_Farbe","Green","darkGreen","Blue","darkBlue","Background_Transparent","Background_Color_Haupt_opacity","cdu_csu_farbe","cdu_farbe","csu_farbe","spd_farbe","afd_farbe","fdp_farbe","gruene_farbe","dielinke_farbe","sonstige_parteien_farbe","nichtwahler_farbe","suchfeld","search_column","quelle","imgsize_h","imgsize_w","bar_switch","bar_column","color_balken_negative","color_balken_positive","negative_bar","kommastellen","data","number_format","String","includes","replace","Math","abs","thousand_number","substring","hundred_number","thousand","mio_number","mio","tranlsateSortingAlphaToNumber","alpha","barchart_column","columnArray","alphaList","number","string","isNaN","length","state_alpha_list","split","columnlist","j","i","push","key","getjustnumber","datavalue","parseFloat","getjuststring","result","match","maxValue","column","exp_column","scope_data","Data","dataArray","Array","forEach","item","index","array","valueToConsider","transform.getjustnumber","values","slice","max","apply","minValue","min","update","$","dataTable","map","e","responsive","details","type","target","colReorder","enable","infoCallback","settings","start","end","total","pre","transform.number_format","dom","columnDefs","targets","render","row","meta","indexOf","value_array","key_array","column_array","parseInt","filter","val","viz.without_bar","transform.tranlsateSortingAlphaToNumber","viz.without_viz","maxVal","stats.maxValue","col","minVal","stats.minValue","rangeMax","minMaxNormalize_plus","minMaxNoralize_minus","pre_bar_container","lefttd_start","lefttd_end","righttd_start","righttd_end","left_content","right_content","post_bar_container","zerovalue","positive","negative","bartext","viz.barchart","paging","scrollY","height","zeilen_height","zeilen","search_height","document","getElementById","clientHeight","quelle_height","rm_zeile_height","pageLength","order","columns","column_data","column_names","title","options.c_names","language","url","drawCallback","css","text","on","count_search_column","all","DataTable","search","this","value","draw","remove","window","onload","each","sandbox"],"mappings":"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"}