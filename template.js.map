{"version":3,"file":"template.js","sources":["src/state.js","src/data.js","src/update.js","src/draw.js"],"sourcesContent":["var state = {\n\n    // Schriftgroesse\n    schriftgroesse: \"1.2rem\",\n\n    // Zeilen Konfigurator\n\n    zeilenOn: true,\n    hauptzeile: \"Hauptzeile\",\n    unterzeile: \"Unterzeile\",\n    hauptzeilen_font_size: \"2.625rem\",\n    unterzeilen_font_size: \"1.25rem\",\n    hauptzeilen_height: \"2.800rem\",\n    unterzeilen_height: \"1.850rem\",\n\n    // Tabellen-Optionen:\n    sortingColumn: \"A\",\n    sortingOrder: \"asc\",\n    numberOfEntries: 10,\n\n    // Reload\n    reload: 1,\n\n    // DOM-Layout Tabelle\n    layout: 'pitr', // pitr\n\n    // Scrolling y\n    yscroll: '500px',\n\n    // Color-Change\n    headerColor: '#dadada',\n    headerSortingColor: \"#000000\",\n\n    // Haupt-Farben\n    Haupt_Farbe: 'green', //\"rgba(211, 45, 32, 1)\",\n    Green: '#6CBA6C',\n    darkGreen: '#45891B',\n    Blue: '#42A8CC',\n    darkBlue: '#036E93',\n\n    // BG-Farben\n    Background_Transparent: \"transparent\",\n    Background_Color_Haupt_opacity: \"rgba(211, 45, 32, 0.5)\",\n\n    // Partei-Farben\n\n    cdu_csu_farbe: '#143d4b',\n    cdu_farbe: '#162129',\n    csu_farbe: '#1782d1',\n    spd_farbe: '#e0341f',\n    afd_farbe: '#00b8e3',\n    fdp_farbe: '#f4d50b',\n    gruene_farbe: '#3bae53',\n    dielinke_farbe: '#a00163',\n    sonstige_parteien_farbe: '#c5cad0',\n    nichtwahler_farbe: '#dce1e0',\n\n    // Suche ein/aus + weitere Optionen\n\n    suchfeld: 'pitr',\n    search_column: 'B',\n\n    // Quelle\n\n    quelle: '| Quelle: ',\n\n    // Images Options\n    imgsize_h: 200,\n    imgsize_w: 200,\n\n    // Bar-Chart-Feature\n    bar_switch: true,\n    bar_column: 'B', //'C,D'//'D',//\n\n\n    // Nummerformatierung\n\n    kommastellen: 0\n\n};\n\nexport default state;","var data = {};\nexport default data;","import state from \"./state\";\nimport data from \"./data\";\n\nimport { numconvert } from './numberConversion.js';\n\n\nfunction update() {\n\n\n    // ## Test Documentation\n    /*     function sortingOrderTranlsate(order) {\n        if (state.sortingOrder == \"Aufsteigend\") {\n            state.sortingOrder = \"asc\";\n            return state.sortingOrder;\n        }\n    \n        else if (state.sortingOrder == \"Absteigend\"){\n            state.sortingOrder = \"desc\";\n            return state.sortingOrder;\n        }\n        else {\n            return state.sortingOrder;\n        }\n\n    } */\n\n    function reloadTable(variable) {\n\n        table.ajax.reload();\n        return variable;\n    }\n\n    let database = data.Data;\n\n    function maxValue(column) {\n        let exp_column = column;\n        let scope_data = database;\n        //console.log(scope_data);\n\n        let dataArray = new Array();\n\n        scope_data.forEach(function(item, index, array) {\n\n            // GET THE LAST ITEM (LAST COLUMN CELL) IN A ARRAY\n            //console.log(item.values.slice(-1)[0], index);\n\n            // Get the active column for bar-charts in Characters, convert it to a number and get the max value of that column\n\n            //console.log(\"Bar Column: \" + exp_column);\n\n            let valueToConsider = getjustnumber(item.values.slice(exp_column)[0]);\n            dataArray.push(valueToConsider);\n            //console.log(valueToConsider)\n\n        });\n\n\n        let maxVal = Math.max.apply(Math, dataArray);\n        //console.log(\"DataArray: \" + dataArray);\n        // console.log(\"InFunction maxValue: \" + maxVal);\n        return maxVal;\n    }\n\n    function minValue(column) {\n\n        let exp_column = column;\n        let scope_data = database;\n\n        let dataArray = new Array();\n\n        scope_data.forEach(function(item, index, array) {\n\n            // GET THE LAST ITEM (LAST COLUMN CELL) IN A ARRAY\n            //console.log(item.values.slice(-1)[0], index);\n\n            // Get the active column for bar-charts in Characters, convert it to a number and get the max value of that column\n\n            //console.log(\"Bar Column: \" + exp_column);\n\n            let valueToConsider = getjustnumber(item.values.slice(exp_column)[0]);\n            dataArray.push(valueToConsider);\n            //console.log(valueToConsider)\n\n        });\n\n\n        let minVal = Math.min.apply(Math, dataArray);\n        //console.log(\"DataArray: \" + dataArray);\n\n        return minVal;\n    }\n\n    // let maxVal = maxValue(3);\n    // console.log(\"MAX Value 4.Column: \" + maxVal);\n\n    //console.log(\"Max Value: \" + maxVal);\n\n    //console.log(data.Data.values[tranlsateSortingAlphaToNumber(state.bar_column]));\n\n    // function balken(data) {\n\n    //     // let chart = d3.select(\"body\")//d3.select(\"td:nth-last-child(1)\")\n    //     // .append(\"svg\")\n    //     // .attr(\"class\", \"barchart\")\n    //     // .attr(\"width\", \"100%\")\n    //     // .attr(\"height\", \"70%\");\n\n\n    //     // let bar = chart.select(\"g\")\n    //     // .data(data)    \n    //     // .enter()\n    //     // .append(\"g\");\n\n\n    //     let bar = d3.append(\"rect\")\n    //     .attr(\"width\", function(d) { return 100/d + \"%\"}) //function(d) { return (d/(d3.sum(data)))*100 + \"%\"; } )   // function(d) { return d + \"%\"})\n    //     .attr(\"x\", \"0\")\n    //     .attr(\"y\", \"50%\")\n    //     .attr(\"height\", \"80%\")\n    //     .attr(\"fill\", \"#000\");\n    // }\n\n    // function getOrderedColumn(table) {\n    //     let order = table.order();\n    //     //console.log(order);\n    //     return order;\n    // }\n\n\n    function tranlsateSortingAlphaToNumber(alpha) {\n        //console.log(alpha[0]);\n\n        let barchart_column;\n        let columnArray = [];\n\n        let alphaList = [{ number: 1, string: 'A' },\n            { number: 2, string: 'B' },\n            { number: 3, string: 'C' },\n            { number: 4, string: 'D' },\n            { number: 5, string: 'E' },\n            { number: 6, string: 'F' },\n            { number: 7, string: 'G' },\n            { number: 8, string: 'H' },\n            { number: 9, string: 'I' },\n            { number: 10, string: 'J' },\n            { number: 11, string: 'K' },\n            { number: 12, string: 'L' },\n            { number: 13, string: 'M' },\n            { number: 14, string: 'N' },\n            { number: 15, string: 'O' },\n            { number: 16, string: 'P' },\n            { number: 17, string: 'Q' },\n            { number: 18, string: 'R' },\n            { number: 19, string: 'S' },\n            { number: 20, string: 'T' },\n            { number: 21, string: 'U' },\n            { number: 22, string: 'V' },\n            { number: 23, string: 'W' },\n            { number: 24, string: 'X' },\n            { number: 25, string: 'Y' },\n            { number: 26, string: 'Z' }\n        ];\n\n        if (isNaN(alpha)) {\n\n            if (alpha.length > 1) {\n                let state_alpha_list = alpha.split(\",\");\n                let columnlist = [];\n                for (let j = 0; j < state_alpha_list.length; j++) {\n\n                    for (let i = 0; i < alphaList.length; i++) {\n                        //console.log(state_alpha_list[j], alphaList[i].string);\n\n                        if (state_alpha_list[j] == alphaList[i].string) {\n                            //console.log(\"Output:\" + alphaList[i].number);\n                            columnlist.push(alphaList[i].number - 1);\n                        }\n                    }\n\n                }\n                //console.log(columnlist);\n                return columnlist;\n            }\n\n            if (typeof alpha == 'object') {\n                //console.log(\"Alpha Array? \" + typeof alpha);\n\n                for (let key in alpha) {\n                    //console.log(alpha[key]);     \n                    let i;\n                    for (i = 0; i < alphaList.length; i++) {\n                        if (alphaList[i].string == alpha[key]) {\n                            //console.log(\"Output:\" + typeof(alphaList[i].number));\n                            columnArray.push(alphaList[i].number - 1);\n                        };\n                    }\n                }\n                //console.log(\"Column Array: \" + \"[\"+columnArray+\"]\");\n                return columnArray;\n            } else {\n                let i;\n                //console.log(\"alpha-Input: \" + alpha);\n                for (i = 0; i < alphaList.length; i++) {\n                    if (alphaList[i].string == alpha) {\n                        //console.log(\"Output:\" + alphaList[i].number);\n                        barchart_column = alphaList[i].number - 1;\n\n                        return barchart_column;\n                    };\n                };\n            }\n        } else {\n            console.log(alpha);\n            return alpha;\n        }\n\n\n\n    }\n\n    //console.log(\"Spaltenzahl: \" + tranlsateSortingAlphaToNumber(state.bar_column));\n\n\n    function c_names() {\n        let column_data = [];\n        for (var i = 0; i < data.Data.column_names.values.length; i++) {\n            column_data.push({ \"title\": data.Data.column_names.values[i] });\n        };\n        //console.log(column_data);\n        return column_data;\n    }\n\n    function without_bar(number, data) {\n        console.log(\"inputnumber: \" + number);\n        let value_array = data.Data[0].values;\n        let column_array = new Array();\n        for (var index in value_array) {\n            if (index != number && index != 0) {\n                column_array.push(parseInt(index));\n            }\n        }\n        return column_array;\n    }\n\n    function number_format(data) {\n\n        if (data > 999 && data < 999999) {\n            return thousand(data);\n        } else if (data > 999999) {\n            return mio(data);\n        } else {\n            return data;\n        }\n\n        function thousand(data) {\n            let thousands = data / 1000;\n            thousands = Math.floor(thousands);\n            let hundreds = data % (thousands * 1000);\n\n            hundreds = hundreds.toFixed(state.kommastellen);\n\n            if (hundreds == 0) {\n                let thousand_number = thousands + \" 000\";\n                return thousand_number;\n            } else if (hundreds < 1) {\n                let thousand_number = thousands + \" 00\" + hundreds;\n                console.log(\"Data: \" + data);\n                console.log(\"Hundreds: \" + hundreds);\n                console.log(\"Thousands: \" + thousands);\n                console.log(thousand_number);\n                return thousand_number;\n            } else {\n                let thousand_number = thousands + \" \" + hundreds;\n                return thousand_number;\n            }\n\n        }\n\n        function mio(data) {\n            let mio = data / 1000000;\n            mio = Math.floor(mio);\n            let rest = data % (mio * 1000000);\n            if (rest == 0) {\n                let mio_number = mio + \" 000 000\";\n                return mio_number;\n            }\n            let mio_number = mio + \" \" + thousand(rest);\n            return mio_number;\n        }\n    }\n\n    function colorMapBalken(data, minVal, maxVal) {\n\n        let color = d3.scaleLinear()\n            .domain([minVal, maxVal])\n            .interpolate(d3.interpolateHsl)\n            .range([\"white\", \"#D82217\"]);\n\n        return color(data);\n\n    }\n\n    function getjustnumber(datavalue) {\n        let number = parseFloat(datavalue);\n        //console.log(number);\n        return number;\n    }\n\n    // let colortestdata = [2,4,7,8,14,55,66,99];\n    // console.log(colortestdata.length);\n    // console.log(colorMapBalken(colortestdata));\n\n\n    let table = $('#myTable').dataTable({\n        data: data.Data.map(e => e.values),\n        responsive: {\n            details: {\n                type: 'inline',\n                target: 0,\n                // display: $.fn.dataTable.Responsive.display.modal( {\n                //     header: function ( row ) {\n                //         var data = row.data()[0];\n                //         return data;\n                //     }\n                // } )\n            }\n        },\n        colReorder: {\n            enable: true,\n            //     order: [ 5, 4, 3, 2, 1, 0 ],\n            //     realtime: false,\n\n        },\n\n\n        // \"drawCallback\": function( settings ) {\n        //     let api = this.api();\n        //     // console.log( api.rows( {page:'current'} ).data() );\n        //     //console.log(api.columns( {page:'current'}).data());\n        //     //var api = new $.fn.dataTable.Api( settings );\n\n\n        //     // Output the data for the visible rows to the browser's console\n        //     // You might do something more useful with it!\n        //     //console.log(api.search);\n        //     //console.log( api.rows( {page:'current'} ).data().table );\n\n        //     // $('#mySearch').on( 'keyup', function () {\n        //     //     table.search( this.value );\n        //     // } );\n        // },\n        \"dom\": state.layout,\n        // buttons: [\n        //     {\n        //         extend: 'columnsToggle',\n        //     }\n        // ],\n        //responsive: true,\n        //\"autoWidth\": true,\n        \"columnDefs\": [{\n            \"targets\": 0,\n            \"data\": 0,\n            \"render\": function(data, type, row, meta) {\n                //console.log(data);\n                if (data.indexOf(\"https://\") > -1) {\n                    var img_tag = '<img src=\"' + data + '\"height=\"' + state.imgsize_h + '\"width=\"' + state.imgsize_w + '\">';\n                    //console.log(\"height: \" + state.imgsize[0] + \", width: \" + state.imgsize[1]);\n                    return img_tag;\n                } else {\n                    return data;\n                }\n            },\n        }, {\n            \"targets\": without_bar(tranlsateSortingAlphaToNumber(state.bar_column), data),\n            \"render\": function(data, type, row, meta) {\n                console.log(\"COLUMN!!\")\n                return number_format(data);\n            }\n        }, {\n            \"targets\": tranlsateSortingAlphaToNumber(state.bar_column),\n            \"render\": function(data, type, row, meta) {\n\n                let maxVal = maxValue(meta.col);\n                let minVal = minValue(meta.col);\n                let rangeMax = maxVal - minVal;\n                // Adjust the max to 100% and distribute to min\n                let maxNormalize = (getjustnumber(data) / maxVal) * 100;\n                // ((data - minVal+1)/rangeMax) * 100 --> Get the difference between the actual data-value and the range to map the data from minValue = 1 (+1) to maxValue = 100 (+1)\n                let minMaxNormalize = ((getjustnumber(data) - minVal + 2) / rangeMax) * 90;\n                // console.log(\"maxValue: \" + maxVal);\n                // console.log(\"minValue: \" + minVal);\n                // console.log(\"minMaxNoralize: \" + minMaxNormalize);\n\n\n                //console.log(\"Max Value in function: \" + maxVal);\n\n                if (state.bar_switch || state.bar_column > 0) { //\n\n                    if (isNaN(getjustnumber(data))) {\n                        //console.log(\"data is not a number\");\n                        return data;\n\n\n                    } else {\n                        let pre_bar_container = '<div class=\"barcont\">';\n                        let bartext = '<div class=\"bartext\"><p style=\"color:#000000\">' + number_format(data) + '</p></div>';\n                        // if (getjustnumber(data) < 0) {\n                        //     let bar = '<div class=\"bardiv\"> <span class=\"bar\" style=\"height:20px;width:' + rangeMax + '%;background: #DD0000\"></span></div>';\n                        // }\n                        //console.log(\"Test minMaxNormalize\" + minMaxNormalize);\n                        let bar = '<div class=\"bardiv\"> <span class=\"bar\" style=\"height:20px;width:' + minMaxNormalize + '%; background: #DD0000\"></span></div>';\n                        // colorMapBalken(data, minVal, maxVal)  / console.log(maxNormalize);\n                        let post_bar_container = '</div>';\n\n                        return pre_bar_container + bar + bartext + post_bar_container;\n                    }\n                } else {\n                    return number_format(data);\n                }\n            }\n        }],\n        \"paging\": false,\n        \"scrollY\": state.yscroll,\n        //\"scrollCollapse\": true,\n        \"pageLength\": state.numberOfEntries,\n        \"order\": [tranlsateSortingAlphaToNumber(state.sortingColumn), state.sortingOrder],\n        columns: c_names(),\n        \"language\": {\n            \"url\": \"//cdn.datatables.net/plug-ins/1.10.19/i18n/German.json\"\n        },\n        \"drawCallback\": function(settings) {\n\n            // Change Header Color\n            $('.dataTables_scrollHead').css(\"background\", state.headerColor);\n            //$('.dataTables_scrollHead th.sorting_desc').css(\"background-color\", state.headerSortingColor);          \n            //console.log(\"Table reload!\");\n            //console.log(state.headerColor);\n        }\n    });\n\n\n    // Responsive Configuration\n    // $(\".addbtn\").on('click',function(){\n    //     var data = table.row(0).data();\n    //     data[3] = \"<button type='button' class='btn btn-info btn-xs' style='font-size: 9px;'>New BtN</button>\";\n    //     table.row(0).data(data);\n    //     table.draw();\n    //   });\n\n    // console.log(getOrderedColumn(table));\n\n    $('#mySearch').on('keyup', function() {\n        let searcher_var = state.search_column;\n        let count_search_column = searcher_var.length - 1;\n\n        console.log(count_search_column);\n\n        if (count_search_column <= 1) {\n            $('#myTable').DataTable().columns(tranlsateSortingAlphaToNumber(state.search_column)).search(this.value).draw();\n            //console.log('Selective Search: ' + tranlsateSortingAlphaToNumber(state.search_column))\n        } else {\n            $('#myTable').DataTable().search(this.value).draw();\n            //console.log('Full Search')\n\n        }\n    });\n\n    // Deactivate Search for Grafik PNG Export\n    function deactivateSearch() {\n        if (state.layout == \"t\") {\n            $('#mySearch').remove();\n        }\n    }\n\n    deactivateSearch();\n\n\n    // Schriftgrösse anpassen\n\n    function mod_font() {\n        $('.table.dataTable thead th').css(\"font-size\", state.schriftgroesse)\n        $('.table.dataTable thead td').css(\"font-size\", state.schriftgroesse)\n        $('.table.dataTable tbody th').css(\"font-size\", state.schriftgroesse)\n        $('.table.dataTable tbody td ').css(\"font-size\", state.schriftgroesse)\n    }\n\n    window.onload = mod_font();\n\n    // Zeilen\n\n    function zeilen() {\n\n        if (state.zeilenOn == true) {\n            $('#zeilen').css(\"display\", \"block\");\n            $('#hauptzeile').text(state.hauptzeile);\n            $('#unterzeile').text(state.unterzeile);\n\n            $('#hauptzeile').css(\"font-size\", state.hauptzeilen_font_size);\n            $('#unterzeile').css(\"font-size\", state.unterzeilen_font_size);\n\n            $('#hauptzeile').css(\"line-height\", state.hauptzeilen_height);\n            $('#unterzeile').css(\"line-height\", state.unterzeilen_height);\n\n        } else {\n            $('#zeilen').css(\"display\", \"none\");\n        }\n\n    }\n\n    zeilen();\n\n    // Quelle\n\n    function quelle() {\n        if (state.quelle) {\n            $('#quelle').text(state.quelle);\n        }\n    }\n\n    quelle();\n\n    // Reloading Problem\n\n    $(\"iframe[name='preview']\").each(function() {\n        this.sandbox += ' allow-modals';\n    });\n\n}\n\nexport default update;","import update from \"./update\";\nimport state from \"./state\";\n\n\nfunction draw() {\n    // The draw function is called when the template first loads\n    update();\n}\n\nexport default draw;"],"names":["state","schriftgroesse","zeilenOn","hauptzeile","unterzeile","hauptzeilen_font_size","unterzeilen_font_size","hauptzeilen_height","unterzeilen_height","sortingColumn","sortingOrder","numberOfEntries","reload","layout","yscroll","headerColor","headerSortingColor","Haupt_Farbe","Green","darkGreen","Blue","darkBlue","Background_Transparent","Background_Color_Haupt_opacity","cdu_csu_farbe","cdu_farbe","csu_farbe","spd_farbe","afd_farbe","fdp_farbe","gruene_farbe","dielinke_farbe","sonstige_parteien_farbe","nichtwahler_farbe","suchfeld","search_column","quelle","imgsize_h","imgsize_w","bar_switch","bar_column","kommastellen","data","update","database","Data","tranlsateSortingAlphaToNumber","alpha","barchart_column","columnArray","alphaList","number","string","isNaN","console","log","length","state_alpha_list","split","columnlist","j","i","push","key","number_format","thousand","mio","Math","floor","rest","mio_number","thousands","hundreds","toFixed","thousand_number","getjustnumber","datavalue","parseFloat","$","dataTable","map","e","values","responsive","details","type","target","colReorder","enable","dom","columnDefs","targets","render","row","meta","indexOf","value_array","column_array","Array","index","parseInt","without_bar","maxVal","column","exp_column","scope_data","dataArray","forEach","item","array","valueToConsider","slice","max","apply","maxValue","col","minVal","min","minValue","rangeMax","minMaxNormalize","paging","scrollY","pageLength","order","columns","column_data","column_names","title","c_names","language","url","drawCallback","settings","css","on","count_search_column","DataTable","search","this","value","draw","remove","window","onload","text","each","sandbox"],"mappings":"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"}