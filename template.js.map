{"version":3,"file":"template.js","sources":["src/state.js","src/data.js","src/update.js","src/draw.js"],"sourcesContent":["\nvar state = {\n  \n    // Tabellen-Optionen:\n    sortingColumn: \"A\",\n    sortingOrder: \"asc\",\n    numberOfEntries: 10,\n  \n    // Reload\n    reload: 1,\n\n    // DOM-Layout Tabelle\n    layout: 'pitr',\n\n   // Scrolling y\n    yscroll: '500px',\n\n   // Color-Change\n    headerColor: '#dadada',\n    headerSortingColor: \"#000000\",\n\n    // Haupt-Farben\n    Haupt_Farbe: 'green',//\"rgba(211, 45, 32, 1)\",\n    Green: '#6CBA6C',\n    darkGreen: '#45891B',\n    Blue: '#42A8CC',\n    darkBlue: '#036E93',\n  \n    // BG-Farben\n    Background_Transparent: \"transparent\",\n    Background_Color_Haupt_opacity: \"rgba(211, 45, 32, 0.5)\",\n  \n    // Partei-Farben\n  \n    cdu_csu_farbe: '#143d4b',\n    cdu_farbe: '#162129',\n    csu_farbe: '#1782d1',\n    spd_farbe: '#e0341f',\n    afd_farbe: '#00b8e3',\n    fdp_farbe: '#f4d50b',\n    gruene_farbe: '#3bae53',\n    dielinke_farbe: '#a00163',\n    sonstige_parteien_farbe: '#c5cad0',\n    nichtwahler_farbe: '#dce1e0',\n    \n\n\n   // Images Options\n\n   imgsize: [100, 150],\n\n   // Bar-Chart-Feature\n   bar_switch: false,\n   bar_column: ''//'C,D'//'D',//\n\n   };\n\n   export default state;","var data = {};\nexport default data;","import state from \"./state\";\nimport data from \"./data\";\n\nimport {numconvert} from './numberConversion.js';\n\n\nfunction update() {\n    \n\n// ## Test Documentation\n    /*     function sortingOrderTranlsate(order) {\n        if (state.sortingOrder == \"Aufsteigend\") {\n            state.sortingOrder = \"asc\";\n            return state.sortingOrder;\n        }\n    \n        else if (state.sortingOrder == \"Absteigend\"){\n            state.sortingOrder = \"desc\";\n            return state.sortingOrder;\n        }\n        else {\n            return state.sortingOrder;\n        }\n\n    } */\n\n    function reloadTable(variable) {\n        \n        table.ajax.reload();\n        return variable;\n    }\n\n    let database = data.Data;\n\n    function maxValue(column) {\n        let exp_column = column;\n        let scope_data = database;\n        //console.log(scope_data);\n\n        let dataArray = new Array();\n        \n        scope_data.forEach(function(item, index, array) {\n            \n                // GET THE LAST ITEM (LAST COLUMN CELL) IN A ARRAY\n                //console.log(item.values.slice(-1)[0], index);\n    \n                // Get the active column for bar-charts in Characters, convert it to a number and get the max value of that column\n                \n                //console.log(\"Bar Column: \" + exp_column);\n\n                let valueToConsider = item.values.slice(exp_column)[0];\n                dataArray.push(valueToConsider);\n                //console.log(valueToConsider)\n    \n            });\n\n         \n        let maxVal = Math.max.apply(Math, dataArray);\n        //console.log(\"DataArray: \" + dataArray);\n\n        return maxVal;\n    }\n\n    function minValue(column) {\n        \n        let exp_column = column;\n        let scope_data = database;\n        \n        let dataArray = new Array();\n        \n        scope_data.forEach(function(item, index, array) {\n            \n                // GET THE LAST ITEM (LAST COLUMN CELL) IN A ARRAY\n                //console.log(item.values.slice(-1)[0], index);\n    \n                // Get the active column for bar-charts in Characters, convert it to a number and get the max value of that column\n                \n                //console.log(\"Bar Column: \" + exp_column);\n\n                let valueToConsider = item.values.slice(exp_column)[0];\n                dataArray.push(valueToConsider);\n                //console.log(valueToConsider)\n    \n            });\n\n         \n        let minVal = Math.min.apply(Math, dataArray);\n        //console.log(\"DataArray: \" + dataArray);\n\n        return minVal;\n    }\n\n    // let maxVal = maxValue(3);\n    // console.log(\"MAX Value 4.Column: \" + maxVal);\n\n    //console.log(\"Max Value: \" + maxVal);\n\n    //console.log(data.Data.values[tranlsateSortingAlphaToNumber(state.bar_column]));\n   \n    // function balken(data) {\n        \n    //     // let chart = d3.select(\"body\")//d3.select(\"td:nth-last-child(1)\")\n    //     // .append(\"svg\")\n    //     // .attr(\"class\", \"barchart\")\n    //     // .attr(\"width\", \"100%\")\n    //     // .attr(\"height\", \"70%\");\n      \n\n    //     // let bar = chart.select(\"g\")\n    //     // .data(data)    \n    //     // .enter()\n    //     // .append(\"g\");\n        \n        \n    //     let bar = d3.append(\"rect\")\n    //     .attr(\"width\", function(d) { return 100/d + \"%\"}) //function(d) { return (d/(d3.sum(data)))*100 + \"%\"; } )   // function(d) { return d + \"%\"})\n    //     .attr(\"x\", \"0\")\n    //     .attr(\"y\", \"50%\")\n    //     .attr(\"height\", \"80%\")\n    //     .attr(\"fill\", \"#000\");\n    // }\n\n    // function getOrderedColumn(table) {\n    //     let order = table.order();\n    //     //console.log(order);\n    //     return order;\n    // }\n\n    \n    function tranlsateSortingAlphaToNumber(alpha) {\n        //console.log(alpha[0]);\n\n        let barchart_column;\n        let columnArray = [];\n\n        let alphaList = [{number:1, string:'A'},\n                         {number:2, string:'B'},\n                         {number:3, string:'C'},\n                         {number:4, string:'D'},\n                         {number:5, string:'E'},\n                         {number:6, string:'F'},\n                         {number:7, string:'G'},\n                         {number:8, string:'H'},\n                         {number:9, string:'I'},\n                         {number:10, string:'J'},\n                         {number:11, string:'K'},\n                         {number:12, string:'L'},\n                         {number:13, string:'M'},\n                         {number:14, string:'N'},\n                         {number:15, string:'O'},\n                         {number:16, string:'P'},\n                         {number:17, string:'Q'},\n                         {number:18, string:'R'},\n                         {number:19, string:'S'},\n                         {number:20, string:'T'},\n                         {number:21, string:'U'},\n                         {number:22, string:'V'},\n                         {number:23, string:'W'},\n                         {number:24, string:'X'},\n                         {number:25, string:'Y'},\n                         {number:26, string:'Z'}\n                        ];\n        \n        if (isNaN(alpha)) {\n\n            if(alpha.length > 1){\n                let state_alpha_list = alpha.split(\",\");\n                let columnlist= [];          \n                for (let j=0; j < state_alpha_list.length; j++) {\n        \n                    for (let i=0; i < alphaList.length; i++) {\n                        //console.log(state_alpha_list[j], alphaList[i].string);\n\n                        if (state_alpha_list[j] == alphaList[i].string) {\n                            //console.log(\"Output:\" + alphaList[i].number);\n                            columnlist.push(alphaList[i].number -1);\n                        }\n                    }\n\n                }\n                //console.log(columnlist);\n                return columnlist;    \n            }\n\n            if(typeof alpha == 'object') {\n                //console.log(\"Alpha Array? \" + typeof alpha);\n    \n                for (let key in alpha) {\n                    //console.log(alpha[key]);     \n                    let i;\n                    for (i=0; i < alphaList.length; i++) {\n                        if (alphaList[i].string == alpha[key]) {\n                            //console.log(\"Output:\" + typeof(alphaList[i].number));\n                            columnArray.push(alphaList[i].number -1);\n                        };             \n                    }\n                }\n                    //console.log(\"Column Array: \" + \"[\"+columnArray+\"]\");\n                    return columnArray;\n            }\n    \n            else {\n                let i;\n                //console.log(\"alpha-Input: \" + alpha);\n                for (i=0; i < alphaList.length; i++) {\n                    if (alphaList[i].string == alpha) {\n                        //console.log(\"Output:\" + alphaList[i].number);\n                        barchart_column = alphaList[i].number -1;\n\n                        return barchart_column;\n                    };\n                }; \n            }\n        }\n\n        else {\n            console.log(alpha);\n            return alpha;\n        }\n        \n\n          \n    }\n\n    //console.log(\"Spaltenzahl: \" + tranlsateSortingAlphaToNumber(state.bar_column));\n\n\n    function c_names() {\n        let column_data = [];\n        for(var i=0; i<data.Data.column_names.values.length; i++){\n            column_data.push({\"title\": data.Data.column_names.values[i]});     \n        };\n        //console.log(column_data);\n        return column_data;\n    }\n    \n    \n    function colorMapBalken(data, minVal, maxVal) {\n\n        let color = d3.scaleLinear()\n        .domain([minVal,maxVal])\n        .interpolate(d3.interpolateHsl)\n        .range([\"white\",\"#D82217\"]);\n\n        return color(data);\n\n    }\n\n    // let colortestdata = [2,4,7,8,14,55,66,99];\n    // console.log(colortestdata.length);\n    // console.log(colorMapBalken(colortestdata));\n   \n    \n    let table = $('#myTable').dataTable( {\n        data: data.Data.map(e => e.values),\n       responsive: {\n            details: {\n                type: 'inline',\n                target: 0,\n                // display: $.fn.dataTable.Responsive.display.modal( {\n                //     header: function ( row ) {\n                //         var data = row.data()[0];\n                //         return data;\n                //     }\n                // } )\n            }\n        },\n        colReorder: {\n            enable: true,\n        //     order: [ 5, 4, 3, 2, 1, 0 ],\n        //     realtime: false,\n\n        },\n\n        // \"drawCallback\": function( settings ) {\n        //     let api = this.api();\n        //     // console.log( api.rows( {page:'current'} ).data() );\n        //     //console.log(api.columns( {page:'current'}).data());\n        //     //var api = new $.fn.dataTable.Api( settings );\n \n            \n        //     // Output the data for the visible rows to the browser's console\n        //     // You might do something more useful with it!\n        //     //console.log(api.search);\n        //     //console.log( api.rows( {page:'current'} ).data().table );\n            \n        //     // $('#mySearch').on( 'keyup', function () {\n        //     //     table.search( this.value );\n        //     // } );\n        // },\n        \"dom\": state.layout,\n        // buttons: [\n        //     {\n        //         extend: 'columnsToggle',\n        //     }\n        // ],\n        //responsive: true,\n        //\"autoWidth\": true,\n        \"columnDefs\" : [{\n            \"targets\": 0,\n            \"data\": 0,\n            \"render\": function ( data, type, row, meta ) {\n                //console.log(data);\n                if (data.indexOf(\"https://\") > -1){\n                    var img_tag = '<img src=\"'+data+'\"height=\"'+state.imgsize[0]+'\"width=\"'+state.imgsize[1]+'\">';\n                    //console.log(data);\n                    return img_tag;\n                }\n                else {\n                    return data;\n                }\n              },\n        },{\n            \"targets\": tranlsateSortingAlphaToNumber(state.bar_column),\n            \"render\": function (data, type, row, meta) {\n                \n                let maxVal = maxValue(meta.col);\n                let minVal = minValue(meta.col);\n                let rangeMax = maxVal - minVal;\n                // Adjust the max to 100% and distribute to min\n                let maxNormalize = (data/maxVal) * 100;\n                // ((data - minVal+1)/rangeMax) * 100 --> Get the difference between the actual data-value and the range to map the data from minValue = 1 (+1) to maxValue = 100 (+1)\n                let minMaxNormalize = ((data - minVal+1)/rangeMax) * 90;\n\n\n                //console.log(\"Max Value in function: \" + maxVal);\n\n                if (state.bar_switch || state.bar_column > 0) {  //\n            \n                    if (isNaN(data)) {\n                        //console.log(\"data is not a number\");\n                        return data;\n                        \n                    \n                    }\n                    else {\n                        let pre_bar_container = '<div class=\"barcont\">';\n                        let bartext = '<div class=\"bartext\"><p style=\"color:#000000\">' + Math.round(data) + '</p></div>';\n                        \n\n                        let bar = '<div class=\"bardiv\"> <span class=\"bar\" style=\"height:20px;width:' + minMaxNormalize + '%; background:'+ colorMapBalken(data, minVal, maxVal) + ';\"></span></div>';\n                        //console.log(maxNormalize);\n                        let post_bar_container = '</div>';\n                        //console.log(maxVal);\n                        return pre_bar_container + bar + bartext + post_bar_container;\n                    }\n                }\n                else {\n                    return data;\n                }\n            }\n        }],\n        \"paging\": false,\n        \"scrollY\": state.yscroll,\n        //\"scrollCollapse\": true,\n        \"pageLength\":state.numberOfEntries,\n        \"order\": [tranlsateSortingAlphaToNumber(state.sortingColumn), state.sortingOrder], \n        columns: c_names(),\n        \"language\": {\n            \"url\": \"//cdn.datatables.net/plug-ins/1.10.19/i18n/German.json\"\n        },\n        \"drawCallback\": function ( settings ) {\n\n            // Change Header Color\n            $('.dataTables_scrollHead').css(\"background\", state.headerColor);\n            //$('.dataTables_scrollHead th.sorting_desc').css(\"background-color\", state.headerSortingColor);          \n            //console.log(\"Table reload!\");\n            //console.log(state.headerColor);\n        }\n    });\n\n\n    // Responsive Configuration\n    // $(\".addbtn\").on('click',function(){\n    //     var data = table.row(0).data();\n    //     data[3] = \"<button type='button' class='btn btn-info btn-xs' style='font-size: 9px;'>New BtN</button>\";\n    //     table.row(0).data(data);\n    //     table.draw();\n    //   });\n \n    // console.log(getOrderedColumn(table));\n\n    $('#mySearch').on( 'keyup', function() {\n        $('#myTable').DataTable().search( this.value ).draw();\n    } );\n\n    // Deactivate Search for Grafik PNG Export\n    function deactivateSearch() {\n        if (state.layout == \"t\") {\n            $('#mySearch').remove();\n        }\n    }\n    \n    deactivateSearch()\n    \n    \n    $(\"iframe[name='preview']\").each(function() {\n        this.sandbox += ' allow-modals';\n    });\n\n}\n\nexport default update;\n","import update from \"./update\";\nimport state from \"./state\";\n\n\nfunction draw() {\n    // The draw function is called when the template first loads\n    update();\n}\n\nexport default draw;"],"names":["state","sortingColumn","sortingOrder","numberOfEntries","reload","layout","yscroll","headerColor","headerSortingColor","Haupt_Farbe","Green","darkGreen","Blue","darkBlue","Background_Transparent","Background_Color_Haupt_opacity","cdu_csu_farbe","cdu_farbe","csu_farbe","spd_farbe","afd_farbe","fdp_farbe","gruene_farbe","dielinke_farbe","sonstige_parteien_farbe","nichtwahler_farbe","imgsize","bar_switch","bar_column","data","update","database","Data","tranlsateSortingAlphaToNumber","alpha","barchart_column","columnArray","alphaList","number","string","isNaN","console","log","length","state_alpha_list","split","columnlist","j","i","push","key","$","dataTable","map","e","values","responsive","details","type","target","colReorder","enable","dom","columnDefs","targets","render","row","meta","indexOf","maxVal","column","exp_column","scope_data","dataArray","Array","forEach","item","index","array","valueToConsider","slice","Math","max","apply","maxValue","col","minVal","min","minValue","minMaxNormalize","pre_bar_container","bartext","round","d3","scaleLinear","domain","interpolate","interpolateHsl","range","color","colorMapBalken","paging","scrollY","pageLength","order","columns","column_data","column_names","title","c_names","language","url","drawCallback","settings","css","on","DataTable","search","this","value","draw","remove","each","sandbox"],"mappings":"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"}