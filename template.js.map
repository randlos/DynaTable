{"version":3,"file":"template.js","sources":["src/state.js","src/data.js","src/update.js","src/draw.js"],"sourcesContent":["var state = {\n\n    // Schriftgroesse\n    schriftgroesse: \"1.2rem\",\n\n    // Sortierung\n    ordering: true,\n\n    // Zeilen Konfigurator\n\n    zeilenOn: true,\n    hauptzeile: \"Hauptzeile\",\n    unterzeile: \"Unterzeile\",\n    hauptzeilen_font_size: \"2.625rem\",\n    unterzeilen_font_size: \"1.25rem\",\n    hauptzeilen_height: \"2.800rem\",\n    unterzeilen_height: \"1.850rem\",\n\n    // Tabellen-Optionen:\n    sortingColumn: \"keine\",\n    sortingOrder: \"asc\",\n    numberOfEntries: 10,\n\n    // Reload\n    reload: 1,\n\n    // DOM-Layout Tabelle\n    layout: 'pitr', // pitr\n\n    // Suche ein-/aus\n    searchswitch: true,\n\n    // Scrolling y\n    yscroll: '602px',\n\n    // Color-Change\n    headerColor: '#dadada',\n    headerSortingColor: \"#000000\",\n\n    // Haupt-Farben\n    Haupt_Farbe: 'green', //\"rgba(211, 45, 32, 1)\",\n    Green: '#6CBA6C',\n    darkGreen: '#45891B',\n    Blue: '#42A8CC',\n    darkBlue: '#036E93',\n\n    // BG-Farben\n    Background_Transparent: \"transparent\",\n    Background_Color_Haupt_opacity: \"rgba(211, 45, 32, 0.5)\",\n\n    // Partei-Farben\n\n    cdu_csu_farbe: '#143d4b',\n    cdu_farbe: '#162129',\n    csu_farbe: '#1782d1',\n    spd_farbe: '#e0341f',\n    afd_farbe: '#00b8e3',\n    fdp_farbe: '#f4d50b',\n    gruene_farbe: '#3bae53',\n    dielinke_farbe: '#a00163',\n    sonstige_parteien_farbe: '#c5cad0',\n    nichtwahler_farbe: '#dce1e0',\n\n    // Suche ein/aus + weitere Optionen\n\n    suchfeld: 'pitr',\n    search_column: 'alle',\n\n    // Quelle\n\n    quelle: '',\n\n    // Images Options\n    imgsize_h: 100,\n    imgsize_w: 100,\n\n    // Bar-Chart-Feature\n    bar_switch: true,\n    bar_column: 'B,C', //'C,D'//'D',//\n    color_balken_negative: '#D82217',\n    color_balken_positive: '#6CBA6C',\n\n    // Negative Bars\n\n    negative_bar: true,\n\n    // Nummerformatierung\n    kommastellen: 2\n\n};\n\nexport default state;","var data = {};\nexport default data;","import state from \"./state\";\nimport data from \"./data\";\n\nimport { numconvert } from './numberConversion.js';\n\n\nfunction update() {\n\n\n    // ## Test Documentation\n    /*     function sortingOrderTranlsate(order) {\n        if (state.sortingOrder == \"Aufsteigend\") {\n            state.sortingOrder = \"asc\";\n            return state.sortingOrder;\n        }\n    \n        else if (state.sortingOrder == \"Absteigend\"){\n            state.sortingOrder = \"desc\";\n            return state.sortingOrder;\n        }\n        else {\n            return state.sortingOrder;\n        }\n\n    } */\n\n    function reloadTable(variable) {\n\n        table.ajax.reload();\n        return variable;\n    }\n\n    let database = data.Data;\n\n    function maxValue(column) {\n        let exp_column = column;\n        let scope_data = database;\n        //console.log(scope_data);\n\n        let dataArray = new Array();\n\n        scope_data.forEach(function(item, index, array) {\n\n            // GET THE LAST ITEM (LAST COLUMN CELL) IN A ARRAY\n            //console.log(item.values.slice(-1)[0], index);\n\n            // Get the active column for bar-charts in Characters, convert it to a number and get the max value of that column\n\n            //console.log(\"Bar Column: \" + exp_column);\n\n            let valueToConsider = getjustnumber(item.values.slice(exp_column)[0]);\n            dataArray.push(valueToConsider);\n            //console.log(valueToConsider)\n\n        });\n\n\n        let maxVal = Math.max.apply(Math, dataArray);\n        //console.log(\"DataArray: \" + dataArray);\n        // console.log(\"InFunction maxValue: \" + maxVal);\n        return maxVal;\n    }\n\n    function minValue(column) {\n\n        let exp_column = column;\n        let scope_data = database;\n\n        let dataArray = new Array();\n\n        scope_data.forEach(function(item, index, array) {\n\n            // GET THE LAST ITEM (LAST COLUMN CELL) IN A ARRAY\n            //console.log(item.values.slice(-1)[0], index);\n\n            // Get the active column for bar-charts in Characters, convert it to a number and get the max value of that column\n\n            //console.log(\"Bar Column: \" + exp_column);\n\n            let valueToConsider = getjustnumber(item.values.slice(exp_column)[0]);\n            dataArray.push(valueToConsider);\n            //console.log(valueToConsider)\n\n        });\n\n\n        let minVal = Math.min.apply(Math, dataArray);\n        //console.log(\"DataArray: \" + dataArray);\n\n        return minVal;\n    }\n\n    // let maxVal = maxValue(3);\n    // console.log(\"MAX Value 4.Column: \" + maxVal);\n\n    //console.log(\"Max Value: \" + maxVal);\n\n    //console.log(data.Data.values[tranlsateSortingAlphaToNumber(state.bar_column]));\n\n    // function balken(data) {\n\n    //     // let chart = d3.select(\"body\")//d3.select(\"td:nth-last-child(1)\")\n    //     // .append(\"svg\")\n    //     // .attr(\"class\", \"barchart\")\n    //     // .attr(\"width\", \"100%\")\n    //     // .attr(\"height\", \"70%\");\n\n\n    //     // let bar = chart.select(\"g\")\n    //     // .data(data)    \n    //     // .enter()\n    //     // .append(\"g\");\n\n\n    //     let bar = d3.append(\"rect\")\n    //     .attr(\"width\", function(d) { return 100/d + \"%\"}) //function(d) { return (d/(d3.sum(data)))*100 + \"%\"; } )   // function(d) { return d + \"%\"})\n    //     .attr(\"x\", \"0\")\n    //     .attr(\"y\", \"50%\")\n    //     .attr(\"height\", \"80%\")\n    //     .attr(\"fill\", \"#000\");\n    // }\n\n    // function getOrderedColumn(table) {\n    //     let order = table.order();\n    //     //console.log(order);\n    //     return order;\n    // }\n\n\n    function tranlsateSortingAlphaToNumber(alpha) {\n        //console.log(alpha);\n\n        let barchart_column;\n        let columnArray = [];\n\n        let alphaList = [{ number: 1, string: 'A' },\n            { number: 2, string: 'B' },\n            { number: 3, string: 'C' },\n            { number: 4, string: 'D' },\n            { number: 5, string: 'E' },\n            { number: 6, string: 'F' },\n            { number: 7, string: 'G' },\n            { number: 8, string: 'H' },\n            { number: 9, string: 'I' },\n            { number: 10, string: 'J' },\n            { number: 11, string: 'K' },\n            { number: 12, string: 'L' },\n            { number: 13, string: 'M' },\n            { number: 14, string: 'N' },\n            { number: 15, string: 'O' },\n            { number: 16, string: 'P' },\n            { number: 17, string: 'Q' },\n            { number: 18, string: 'R' },\n            { number: 19, string: 'S' },\n            { number: 20, string: 'T' },\n            { number: 21, string: 'U' },\n            { number: 22, string: 'V' },\n            { number: 23, string: 'W' },\n            { number: 24, string: 'X' },\n            { number: 25, string: 'Y' },\n            { number: 26, string: 'Z' }\n        ];\n\n        if (isNaN(alpha)) {\n\n            if (alpha.length > 1) {\n                let state_alpha_list = alpha.split(\",\");\n                let columnlist = [];\n                for (let j = 0; j < state_alpha_list.length; j++) {\n\n                    for (let i = 0; i < alphaList.length; i++) {\n                        //console.log(state_alpha_list[j], alphaList[i].string);\n\n                        if (state_alpha_list[j] == alphaList[i].string) {\n                            //console.log(\"Output:\" + alphaList[i].number);\n                            columnlist.push(alphaList[i].number - 1);\n                        }\n                    }\n\n                }\n                //console.log(columnlist);\n                //console.log(\"Type Array\" + typeof(columnlist));\n                return columnlist;\n            }\n\n            if (typeof alpha == 'object') {\n                //console.log(\"Alpha Array? \" + typeof alpha);\n\n                for (let key in alpha) {\n                    //console.log(alpha[key]);     \n                    let i;\n                    for (i = 0; i < alphaList.length; i++) {\n                        if (alphaList[i].string == alpha[key]) {\n                            //console.log(\"Output:\" + typeof(alphaList[i].number));\n                            columnArray.push(alphaList[i].number - 1);\n                        };\n                    }\n                }\n                //console.log(\"Column Array: \" + \"[\" + columnArray + \"]\");\n                return columnArray;\n            } else {\n                let i;\n                //console.log(\"alpha-Input: \" + alpha);\n                for (i = 0; i < alphaList.length; i++) {\n                    if (alphaList[i].string == alpha) {\n                        //console.log(\"Output:\" + alphaList[i].number);\n                        barchart_column = alphaList[i].number - 1;\n                        //console.log(barchart_column);\n                        return barchart_column;\n                    };\n                };\n            }\n        } else {\n            //console.log(alpha);\n            return alpha;\n        }\n\n\n\n    }\n\n\n    function sortingswitch(sortingColumn, sortingOrder) {\n        if (sortingColumn == 'keine') {\n            return new Array();\n        } else {\n            let column = tranlsateSortingAlphaToNumber(sortingColumn);\n            let output = [column, sortingOrder];\n            return output;\n        }\n    }\n\n    //console.log(\"Spaltenzahl: \" + tranlsateSortingAlphaToNumber(state.bar_column));\n\n\n    function c_names() {\n        let column_data = [];\n        for (var i = 0; i < data.Data.column_names.values.length; i++) {\n            column_data.push({ \"title\": data.Data.column_names.values[i] });\n        };\n        //console.log(column_data);\n        return column_data;\n    }\n\n    function without_bar(number, data) {\n\n        let value_array = data.Data[0].values;\n\n        let column_array = new Array();\n        for (var index in value_array) {\n            if (isNaN(number)) {\n                for (var j in number) {\n                    if (index != j && index != 0) {\n                        console.log(\"Pop Index: \" + j);\n                        column_array.pop(parseInt(index));\n                    }\n                }\n            }\n            if (index != number && index != 0) {\n                console.log(\"Push Index: \" + index)\n                column_array.push(parseInt(index));\n            }\n        }\n        console.log(column_array);\n        return column_array;\n    }\n\n    function number_format(data) {\n\n        if (Math.abs(data) >= 10000 && Math.abs(data) <= 1000000) {\n            //console.log(thousand(data));\n            return thousand(data);\n        } else if (Math.abs(data) >= 1000000) {\n            return mio(data);\n        } else if (data < 0) {\n            let minus = data.substring(0, 1);\n            let hundreds = data.substring(1, );\n            return minus + \" \" + hundreds;\n        } else {\n            return data;\n        }\n\n        function thousand(data) {\n            if (data < 0 && Math.abs(data) < 100000) {\n                let thousand_number = data.substring(1, 3);\n                let hundred_number = data.substring(3, 6);\n                return \"- \" + thousand_number + \" \" + hundred_number;\n            } else if (data < 0 && Math.abs(data) > 100000) {\n                let thousand_number = data.substring(1, 4);\n                let hundred_number = data.substring(4, 7);\n                return \"- \" + thousand_number + \" \" + hundred_number;\n            } else if (data > 0 && Math.abs(data) < 100000) {\n                let thousand_number = data.substring(0, 2);\n                let hundred_number = data.substring(2, 5);\n                return thousand_number + \" \" + hundred_number;\n            } else {\n                let thousand_number = data.substring(0, 3);\n                let hundred_number = data.substring(3, 6);\n                return thousand_number + \" \" + hundred_number;\n            }\n\n\n        }\n\n        function mio(data) {\n            //let mio = data.toString();\n            if (data < 0) {\n                let mio_number = data.substring(1, 2);\n                let thousand_number = data.substring(2, 5);\n                let hundred_number = data.substring(5, 8);\n                // console.log(mio_number + \" \" + thousand_number + \" \" + hundred_number);\n                return \"- \" + mio_number + \" \" + thousand_number + \" \" + hundred_number;\n            } else {\n                let mio_number = data.substring(0, 1);\n                let thousand_number = data.substring(1, 4);\n                let hundred_number = data.substring(4, 7);\n                return mio_number + \" \" + thousand_number + \" \" + hundred_number;\n            }\n\n        }\n    }\n\n    function colorMapBalken(data, minVal, maxVal) {\n\n        let color = d3.scaleLinear()\n            .domain([minVal, maxVal])\n            .interpolate(d3.interpolateHsl)\n            .range([\"white\", \"#D82217\"]);\n\n        return color(data);\n\n    }\n\n    function getjustnumber(datavalue) {\n        let number = parseFloat(datavalue);\n        if (datavalue == \"keine Angabe\") {\n            //console.log(datavalue);\n            return 0;\n        }\n        return number;\n    }\n\n    function getjuststring(datavalue) {\n        var str = datavalue;\n        var patt = /[A-Za-z$€].*/g;\n        var result = str.match(patt);\n        return result;\n    }\n\n\n\n    // let colortestdata = [2,4,7,8,14,55,66,99];\n    // console.log(colortestdata.length);\n    // console.log(colorMapBalken(colortestdata));\n\n\n    function rm_zeile_height(height) {\n\n        // Get zeilen_height while creating zeilen in zeilen():553 / If recieved in this. function, the DOM isn't fully loaded yet \n        let zeilen_height = zeilen();\n        let search_height = document.getElementById(\"search\").clientHeight;\n        let quelle_height = document.getElementById(\"quelle\").clientHeight;\n        let table_height = parseInt(height) - zeilen_height - search_height - quelle_height + \"px\";\n        //console.log(table_height);\n        return table_height;\n    }\n\n    let table = $('#myTable').dataTable({\n        data: data.Data.map(e => e.values),\n        responsive: {\n            details: {\n                type: 'inline',\n                target: 0,\n                // display: $.fn.dataTable.Responsive.display.modal( {\n                //     header: function ( row ) {\n                //         var data = row.data()[0];\n                //         return data;\n                //     }\n                // } )\n            }\n        },\n        \"ordering\": state.ordering,\n        colReorder: {\n            enable: false,\n            //     order: [ 5, 4, 3, 2, 1, 0 ],\n            //     realtime: false,\n\n        },\n\n\n        // \"drawCallback\": function( settings ) {\n        //     let api = this.api();\n        //     // console.log( api.rows( {page:'current'} ).data() );\n        //     //console.log(api.columns( {page:'current'}).data());\n        //     //var api = new $.fn.dataTable.Api( settings );\n\n\n        //     // Output the data for the visible rows to the browser's console\n        //     // You might do something more useful with it!\n        //     //console.log(api.search);\n        //     //console.log( api.rows( {page:'current'} ).data().table );\n\n        //     // $('#mySearch').on( 'keyup', function () {\n        //     //     table.search( this.value );\n        //     // } );\n        // },\n        \"dom\": state.layout,\n        // buttons: [\n        //     {\n        //         extend: 'columnsToggle',\n        //     }\n        // ],\n        //responsive: true,\n        //\"autoWidth\": true,\n        \"columnDefs\": [{\n                \"targets\": 0,\n                \"data\": 0,\n                \"render\": function(data, type, row, meta) {\n                    if (data.indexOf(\"https://\") > -1) {\n                        var img_tag = '<img src=\"' + data + '\"height=\"' + state.imgsize_h + '\"width=\"' + state.imgsize_w + '\">';\n                        //console.log(\"height: \" + state.imgsize[0] + \", width: \" + state.imgsize[1]);\n                        return img_tag;\n                    } else {\n                        return data;\n                    }\n                },\n            },\n            {\n                \"targets\": without_bar(tranlsateSortingAlphaToNumber(state.bar_column), data),\n                \"render\": function(data, type, row, meta) {\n                    if (type == \"display\") {\n                        return number_format(data);\n                    }\n                    return getjustnumber(data);\n                }\n            },\n            {\n                \"targets\": tranlsateSortingAlphaToNumber(state.bar_column),\n                \"render\": function(data, type, row, meta) {\n                    //console.log(state.bar_column);\n                    //console.log(tranlsateSortingAlphaToNumber(state.bar_column));\n                    let maxVal = maxValue(meta.col);\n                    let minVal = minValue(meta.col);\n                    //console.log(\"MinValue: \" + minVal);\n                    let rangeMax = maxVal - minVal;\n                    //console.log(\"rangeMax: \" + rangeMax);\n\n                    // Adjust the max to 100% and distribute to min\n                    let maxNormalize = (Math.abs(getjustnumber(data)) / maxVal) * 100;\n                    // ((data - minVal+1)/rangeMax) * 100 --> Get the difference between the actual data-value and the range to map the data from minValue = 1 (+1) to maxValue = 100 (+1)\n                    let minMaxNormalize_plus = ((Math.abs(getjustnumber(data)) - minVal) / rangeMax) * 90;\n                    let minMaxNoralize_minus = ((Math.abs(getjustnumber(data)) - minVal) / rangeMax) * 53;\n\n\n                    // console.log(\"input: \" + Math.abs(getjustnumber(data)));\n                    //console.log(\"minVal: \" + minVal);\n                    //console.log(\"output: \" + (Math.abs(getjustnumber(data)) - Math.abs(minVal)));\n                    // console.log(\"____\");\n                    // console.log(\"minMaxNormalized: \" + minMaxNormalize_plus);\n                    // console.log(\"rangeMax: \" + rangeMax);\n                    // console.log(\"____\");\n\n\n                    // console.log(\"maxValue: \" + maxVal);\n                    // console.log(\"minValue: \" + minVal);\n                    // console.log(\"minMaxNoralize: \" + minMaxNormalize);\n\n                    //let bar_data = Math.abs(getjustnumber(data));\n\n                    //getjuststring(data);\n\n\n                    //console.log(\"Max Value in function: \" + maxVal);\n                    if (type == \"display\") {\n                        if (state.bar_switch) { //\n                            if (isNaN(getjustnumber(data))) {\n                                //console.log(\"data is not a number\");\n                                return data;\n\n                            } else if (state.negative_bar) {\n                                let pre_bar_container = '<div class=\"barcont\">';\n\n                                let lefttd_start = '<div class=\"leftbar\">';\n                                let lefttd_end = '</div>';\n                                let righttd_start = '<div class=\"rightbar\">';\n                                let righttd_end = '</div>';\n\n\n\n                                let left_content = '<p style=\"text-align:right;margin:0 4px 0 0;\">' + number_format(data) + '</p>';\n                                let right_content = '<p style=\"text-align:left;margin:0 0 0 4px;\">' + number_format(data) + '</p>';\n\n                                // \n\n                                let right_bar = '<div class=\"bardiv\"> <span class=\"bar\" style=\"height:19px;margin: 3px 0 0 0;width:' + minMaxNoralize_minus + '%; background: ' + state.color_balken_positive + '\"></span></div>';\n                                let left_bar = '<div class=\"bardiv\"> <span class=\"bar\" style=\"float:right;margin:0;height:20px;margin: 3px 1px 0 0;width:' + minMaxNoralize_minus + '%; background:' + state.color_balken_negative + '\"></span></div>';\n\n                                let post_bar_container = '</div>';\n\n\n                                let zerovalue = pre_bar_container + '<p style=\"text-align: center; margin:0;\">' + data + '</p>' + post_bar_container;\n                                let positive = pre_bar_container + lefttd_start + left_content + lefttd_end + righttd_start + right_bar + righttd_end + post_bar_container;\n                                let negative = pre_bar_container + lefttd_start + left_bar + lefttd_end + righttd_start + right_content + righttd_end + post_bar_container;\n\n                                if (getjustnumber(data) < 0) {\n                                    //console.log(Math.abs(getjustnumber(data)));  \n                                    return negative;\n                                } else if (getjustnumber(data) == 0) {\n                                    return zerovalue;\n                                } else {\n                                    return positive\n                                }\n\n\n                            } else {\n                                let pre_bar_container = '<div class=\"barcont\">';\n                                let bartext = '<div class=\"bartext\"><p style=\"color:#000000\">' + data + '</p></div>';\n                                // if (getjustnumber(data) < 0) {\n                                //     let bar = '<div class=\"bardiv\"> <span class=\"bar\" style=\"height:20px;width:' + rangeMax + '%;background: #DD0000\"></span></div>';\n                                // }\n                                //console.log(\"Test minMaxNormalize\" + minMaxNormalize);\n\n                                // BARCHART WITH DIV\n                                let bar = '<div class=\"bardiv\"> <span class=\"bar\" style=\"lheight:20px;width:' + minMaxNormalize_plus + '%; background:' + state.color_balken_positive + '\"></span></div>';\n                                // colorMapBalken(data, minVal, maxVal)  / console.log(maxNormalize);\n                                let post_bar_container = '</div>';\n\n                                return pre_bar_container + bar + bartext + post_bar_container;\n                            }\n                        } else {\n                            return number_format(data);\n                        }\n                    }\n\n                    return getjustnumber(data);\n\n\n                }\n\n            }\n        ],\n        \"paging\": false,\n        \"scrollY\": rm_zeile_height(state.yscroll),\n        //\"scrollCollapse\": true,\n        \"pageLength\": state.numberOfEntries,\n        \"order\": sortingswitch(state.sortingColumn, state.sortingOrder), //[tranlsateSortingAlphaToNumber(state.sortingColumn), state.sortingOrder],\n        columns: c_names(),\n        \"language\": {\n            \"url\": \"//cdn.datatables.net/plug-ins/1.10.19/i18n/German.json\"\n        },\n        \"drawCallback\": function(settings) {\n            if (state.sortingColumn)\n            // Change Header Color\n                $('.dataTables_scrollHead').css(\"background\", state.headerColor);\n            //$('.dataTables_scrollHead th.sorting_desc').css(\"background-color\", state.headerSortingColor);          \n\n        }\n    });\n\n\n    // Responsive Configuration\n    // $(\".addbtn\").on('click',function(){\n    //     var data = table.row(0).data();\n    //     data[3] = \"<button type='button' class='btn btn-info btn-xs' style='font-size: 9px;'>New BtN</button>\";\n    //     table.row(0).data(data);\n    //     table.draw();\n    //   });\n    // console.log(getOrderedColumn(table));\n\n    $('#mySearch').on('keyup', function() {\n        let searcher_var = state.search_column;\n        let count_search_column = searcher_var.length - 1;\n\n        //console.log(count_search_column);\n\n        if (count_search_column <= 1) {\n            $('#myTable').DataTable().columns(tranlsateSortingAlphaToNumber(state.search_column)).search(this.value).draw();\n            //console.log('Selective Search: ' + tranlsateSortingAlphaToNumber(state.search_column))\n        } else {\n            $('#myTable').DataTable().search(this.value).draw();\n            //console.log('Full Search')\n\n        }\n    });\n\n    // Deactivate Search for Grafik PNG Export\n    function deactivateSearch() {\n        if (!state.searchswitch) {\n            $('#mySearch').remove();\n        }\n    }\n\n    deactivateSearch();\n\n\n    // Schriftgrösse anpassen\n\n    function mod_font() {\n        $('.table.dataTable thead th').css(\"font-size\", state.schriftgroesse)\n        $('.table.dataTable thead td').css(\"font-size\", state.schriftgroesse)\n        $('.table.dataTable tbody th').css(\"font-size\", state.schriftgroesse)\n        $('.table.dataTable tbody td ').css(\"font-size\", state.schriftgroesse)\n    }\n\n    window.onload = mod_font();\n\n    // Zeilen\n\n    function zeilen() {\n\n        if (state.zeilenOn == true) {\n            $('#zeilen').css(\"display\", \"block\");\n            $('#hauptzeile').text(state.hauptzeile);\n            $('#unterzeile').text(state.unterzeile);\n\n            $('#hauptzeile').css(\"font-size\", state.hauptzeilen_font_size);\n            $('#unterzeile').css(\"font-size\", state.unterzeilen_font_size);\n\n            $('#hauptzeile').css(\"line-height\", state.hauptzeilen_height);\n            $('#unterzeile').css(\"line-height\", state.unterzeilen_height);\n\n        } else {\n            $('#zeilen').css(\"display\", \"none\");\n        }\n\n        let zeilen_height = document.getElementById(\"zeilen\").clientHeight;\n        return zeilen_height;\n    }\n\n    zeilen();\n\n    // Quelle\n\n    function quelle() {\n        if (state.quelle) {\n            $('#quelle').text(state.quelle);\n        }\n\n    }\n\n\n    quelle();\n\n    // Reloading Problem\n\n    $(\"iframe[name='preview']\").each(function() {\n        this.sandbox += ' allow-modals';\n    });\n\n}\n\nexport default update;","import update from \"./update\";\nimport state from \"./state\";\n\n\nfunction draw() {\n    // The draw function is called when the template first loads\n    update();\n}\n\nexport default draw;"],"names":["state","schriftgroesse","ordering","zeilenOn","hauptzeile","unterzeile","hauptzeilen_font_size","unterzeilen_font_size","hauptzeilen_height","unterzeilen_height","sortingColumn","sortingOrder","numberOfEntries","reload","layout","searchswitch","yscroll","headerColor","headerSortingColor","Haupt_Farbe","Green","darkGreen","Blue","darkBlue","Background_Transparent","Background_Color_Haupt_opacity","cdu_csu_farbe","cdu_farbe","csu_farbe","spd_farbe","afd_farbe","fdp_farbe","gruene_farbe","dielinke_farbe","sonstige_parteien_farbe","nichtwahler_farbe","suchfeld","search_column","quelle","imgsize_h","imgsize_w","bar_switch","bar_column","color_balken_negative","color_balken_positive","negative_bar","kommastellen","data","update","database","Data","tranlsateSortingAlphaToNumber","alpha","barchart_column","columnArray","alphaList","number","string","isNaN","length","state_alpha_list","split","columnlist","j","i","push","key","number_format","Math","abs","thousand_number","substring","hundred_number","thousand","mio_number","mio","getjustnumber","datavalue","parseFloat","$","dataTable","map","e","values","responsive","details","type","target","colReorder","enable","dom","columnDefs","targets","render","row","meta","indexOf","value_array","column_array","Array","index","console","log","pop","parseInt","without_bar","maxVal","column","exp_column","scope_data","dataArray","forEach","item","array","valueToConsider","slice","max","apply","maxValue","col","minVal","min","minValue","rangeMax","minMaxNormalize_plus","minMaxNoralize_minus","pre_bar_container","lefttd_start","lefttd_end","righttd_start","righttd_end","left_content","right_content","post_bar_container","zerovalue","positive","negative","bartext","paging","scrollY","height","zeilen_height","zeilen","search_height","document","getElementById","clientHeight","quelle_height","rm_zeile_height","pageLength","order","columns","column_data","column_names","title","c_names","language","url","drawCallback","settings","css","text","on","DataTable","search","this","value","draw","remove","window","onload","each","sandbox"],"mappings":"sCAAA,IAAIA,GAGAC,eAAgB,SAGhBC,UAAU,EAIVC,UAAU,EACVC,WAAY,aACZC,WAAY,aACZC,sBAAuB,WACvBC,sBAAuB,UACvBC,mBAAoB,WACpBC,mBAAoB,WAGpBC,cAAe,QACfC,aAAc,MACdC,gBAAiB,GAGjBC,OAAQ,EAGRC,OAAQ,OAGRC,cAAc,EAGdC,QAAS,QAGTC,YAAa,UACbC,mBAAoB,UAGpBC,YAAa,QACbC,MAAO,UACPC,UAAW,UACXC,KAAM,UACNC,SAAU,UAGVC,uBAAwB,cACxBC,+BAAgC,yBAIhCC,cAAe,UACfC,UAAW,UACXC,UAAW,UACXC,UAAW,UACXC,UAAW,UACXC,UAAW,UACXC,aAAc,UACdC,eAAgB,UAChBC,wBAAyB,UACzBC,kBAAmB,UAInBC,SAAU,OACVC,cAAe,OAIfC,OAAQ,GAGRC,UAAW,IACXC,UAAW,IAGXC,YAAY,EACZC,WAAY,MACZC,sBAAuB,UACvBC,sBAAuB,UAIvBC,cAAc,EAGdC,aAAc,GCvFdC,KCMJ,SAASC,IA0BL,IAAIC,EAAWF,EAAKG,KAiGpB,SAASC,EAA8BC,GAGnC,IAAIC,EACAC,KAEAC,IAAeC,OAAQ,EAAGC,OAAQ,MAChCD,OAAQ,EAAGC,OAAQ,MACnBD,OAAQ,EAAGC,OAAQ,MACnBD,OAAQ,EAAGC,OAAQ,MACnBD,OAAQ,EAAGC,OAAQ,MACnBD,OAAQ,EAAGC,OAAQ,MACnBD,OAAQ,EAAGC,OAAQ,MACnBD,OAAQ,EAAGC,OAAQ,MACnBD,OAAQ,EAAGC,OAAQ,MACnBD,OAAQ,GAAIC,OAAQ,MACpBD,OAAQ,GAAIC,OAAQ,MACpBD,OAAQ,GAAIC,OAAQ,MACpBD,OAAQ,GAAIC,OAAQ,MACpBD,OAAQ,GAAIC,OAAQ,MACpBD,OAAQ,GAAIC,OAAQ,MACpBD,OAAQ,GAAIC,OAAQ,MACpBD,OAAQ,GAAIC,OAAQ,MACpBD,OAAQ,GAAIC,OAAQ,MACpBD,OAAQ,GAAIC,OAAQ,MACpBD,OAAQ,GAAIC,OAAQ,MACpBD,OAAQ,GAAIC,OAAQ,MACpBD,OAAQ,GAAIC,OAAQ,MACpBD,OAAQ,GAAIC,OAAQ,MACpBD,OAAQ,GAAIC,OAAQ,MACpBD,OAAQ,GAAIC,OAAQ,MACpBD,OAAQ,GAAIC,OAAQ,MAG1B,IAAIC,MAAMN,GAmDN,OAAOA,EAjDP,GAAIA,EAAMO,OAAS,EAAG,CAClB,IAAIC,EAAmBR,EAAMS,MAAM,KAC/BC,KACJ,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAiBD,OAAQI,IAEzC,IAAK,IAAIC,EAAI,EAAGA,EAAIT,EAAUI,OAAQK,IAG9BJ,EAAiBG,IAAMR,EAAUS,GAAGP,QAEpCK,EAAWG,KAAKV,EAAUS,GAAGR,OAAS,GAOlD,OAAOM,EAGX,GAAoB,iBAATV,EAAmB,CAG1B,IAAK,IAAIc,KAAOd,EAAO,CAEnB,IAAIY,EACJ,IAAKA,EAAI,EAAGA,EAAIT,EAAUI,OAAQK,IAC1BT,EAAUS,GAAGP,QAAUL,EAAMc,IAE7BZ,EAAYW,KAAKV,EAAUS,GAAGR,OAAS,GAKnD,OAAOF,EACJ,CACH,IAAIU,EAEJ,IAAKA,EAAI,EAAGA,EAAIT,EAAUI,OAAQK,IAC9B,GAAIT,EAAUS,GAAGP,QAAUL,EAIvB,OAFAC,EAAkBE,EAAUS,GAAGR,OAAS,GA6D5D,SAASW,EAAcpB,GAEnB,GAAIqB,KAAKC,IAAItB,IAAS,KAASqB,KAAKC,IAAItB,IAAS,IAE7C,OAWJ,SAAkBA,GACd,GAAIA,EAAO,GAAKqB,KAAKC,IAAItB,GAAQ,IAAQ,CACrC,IAAIuB,EAAkBvB,EAAKwB,UAAU,EAAG,GACpCC,EAAiBzB,EAAKwB,UAAU,EAAG,GACvC,MAAO,KAAOD,EAAkB,IAAME,EACnC,GAAIzB,EAAO,GAAKqB,KAAKC,IAAItB,GAAQ,IAAQ,CAC5C,IAAIuB,EAAkBvB,EAAKwB,UAAU,EAAG,GACpCC,EAAiBzB,EAAKwB,UAAU,EAAG,GACvC,MAAO,KAAOD,EAAkB,IAAME,EACnC,GAAIzB,EAAO,GAAKqB,KAAKC,IAAItB,GAAQ,IAAQ,CAC5C,IAAIuB,EAAkBvB,EAAKwB,UAAU,EAAG,GACpCC,EAAiBzB,EAAKwB,UAAU,EAAG,GACvC,OAAOD,EAAkB,IAAME,EAC5B,CACH,IAAIF,EAAkBvB,EAAKwB,UAAU,EAAG,GACpCC,EAAiBzB,EAAKwB,UAAU,EAAG,GACvC,OAAOD,EAAkB,IAAME,GA3B5BC,CAAS1B,GACb,GAAIqB,KAAKC,IAAItB,IAAS,IACzB,OA+BJ,SAAaA,GAET,GAAIA,EAAO,EAAG,CACV,IAAI2B,EAAa3B,EAAKwB,UAAU,EAAG,GAC/BD,EAAkBvB,EAAKwB,UAAU,EAAG,GACpCC,EAAiBzB,EAAKwB,UAAU,EAAG,GAEvC,MAAO,KAAOG,EAAa,IAAMJ,EAAkB,IAAME,EACtD,CACH,IAAIE,EAAa3B,EAAKwB,UAAU,EAAG,GAC/BD,EAAkBvB,EAAKwB,UAAU,EAAG,GACpCC,EAAiBzB,EAAKwB,UAAU,EAAG,GACvC,OAAOG,EAAa,IAAMJ,EAAkB,IAAME,GA3C/CG,CAAI5B,GACR,GAAIA,EAAO,EAAG,CAGjB,OAFYA,EAAKwB,UAAU,EAAG,GAEf,IADAxB,EAAKwB,UAAU,GAG9B,OAAOxB,EAsDf,SAAS6B,EAAcC,GACnB,IAAIrB,EAASsB,WAAWD,GACxB,MAAiB,gBAAbA,EAEO,EAEJrB,EA4BCuB,EAAE,YAAYC,WACtBjC,KAAMA,EAAKG,KAAK+B,IAAIC,GAAKA,EAAEC,QAC3BC,YACIC,SACIC,KAAM,SACNC,OAAQ,IAShBrF,SAAYF,EAAME,SAClBsF,YACIC,QAAQ,GAuBZC,IAAO1F,EAAMc,OAQb6E,aACQC,QAAW,EACX7C,KAAQ,EACR8C,OAAU,SAAS9C,EAAMuC,EAAMQ,EAAKC,GAChC,OAAIhD,EAAKiD,QAAQ,aAAe,EACd,aAAejD,EAAO,YAAc/C,EAAMuC,UAAY,WAAavC,EAAMwC,UAAY,KAI5FO,KAKf6C,QAxLZ,SAAqBpC,EAAQT,GAEzB,IAAIkD,EAAclD,EAAKG,KAAK,GAAGiC,OAE3Be,EAAe,IAAIC,MACvB,IAAK,IAAIC,KAASH,EAAa,CAC3B,GAAIvC,MAAMF,GACN,IAAK,IAAIO,KAAKP,EACN4C,GAASrC,GAAc,GAATqC,IACdC,QAAQC,IAAI,cAAgBvC,GAC5BmC,EAAaK,IAAIC,SAASJ,KAIlCA,GAAS5C,GAAmB,GAAT4C,IACnBC,QAAQC,IAAI,eAAiBF,GAC7BF,EAAajC,KAAKuC,SAASJ,KAInC,OADAC,QAAQC,IAAIJ,GACLA,EAoKYO,CAAYtD,EAA8BnD,EAAM0C,YAAaK,GACxE8C,OAAU,SAAS9C,EAAMuC,EAAMQ,EAAKC,GAChC,MAAY,WAART,EACOnB,EAAcpB,GAElB6B,EAAc7B,MAIzB6C,QAAWzC,EAA8BnD,EAAM0C,YAC/CmD,OAAU,SAAS9C,EAAMuC,EAAMQ,EAAKC,GAGhC,IAAIW,EAvZpB,SAAkBC,GACd,IAAIC,EAAaD,EACbE,EAAa5D,EAGb6D,EAAY,IAAIX,MAqBpB,OAnBAU,EAAWE,QAAQ,SAASC,EAAMZ,EAAOa,GASrC,IAAIC,EAAkBtC,EAAcoC,EAAK7B,OAAOgC,MAAMP,GAAY,IAClEE,EAAU7C,KAAKiD,KAMN9C,KAAKgD,IAAIC,MAAMjD,KAAM0C,GAgYTQ,CAASvB,EAAKwB,KACvBC,EA3XpB,SAAkBb,GAEd,IAAIC,EAAaD,EACbE,EAAa5D,EAEb6D,EAAY,IAAIX,MAqBpB,OAnBAU,EAAWE,QAAQ,SAASC,EAAMZ,EAAOa,GASrC,IAAIC,EAAkBtC,EAAcoC,EAAK7B,OAAOgC,MAAMP,GAAY,IAClEE,EAAU7C,KAAKiD,KAMN9C,KAAKqD,IAAIJ,MAAMjD,KAAM0C,GAoWTY,CAAS3B,EAAKwB,KAEvBI,EAAWjB,EAASc,EAMpBI,GAAyBxD,KAAKC,IAAIO,EAAc7B,IAASyE,GAAUG,EAAY,GAC/EE,GAAyBzD,KAAKC,IAAIO,EAAc7B,IAASyE,GAAUG,EAAY,GAsBnF,GAAY,WAARrC,EAAmB,CACnB,GAAItF,EAAMyC,WAAY,CAClB,GAAIiB,MAAMkB,EAAc7B,IAEpB,OAAOA,EAEJ,GAAI/C,EAAM6C,aAAc,CAC3B,IAAIiF,EAAoB,wBAEpBC,EAAe,wBACfC,EAAa,SACbC,EAAgB,yBAChBC,EAAc,SAIdC,EAAe,iDAAmDhE,EAAcpB,GAAQ,OACxFqF,EAAgB,gDAAkDjE,EAAcpB,GAAQ,OAOxFsF,EAAqB,SAGrBC,EAAYR,EAAoB,4CAA8C/E,EAAO,OAASsF,EAC9FE,EAAWT,EAAoBC,EAAeI,EAAeH,EAAaC,GAP9D,qFAAuFJ,EAAuB,kBAAoB7H,EAAM4C,sBAAwB,mBAOtEsF,EAAcG,EACpHG,EAAWV,EAAoBC,GAPpB,4GAA8GF,EAAuB,iBAAmB7H,EAAM2C,sBAAwB,mBAOxIqF,EAAaC,EAAgBG,EAAgBF,EAAcG,EAExH,OAAIzD,EAAc7B,GAAQ,EAEfyF,EACuB,GAAvB5D,EAAc7B,GACduF,EAEAC,EAIR,CACH,IACIE,EAAU,iDAAmD1F,EAAO,aAWxE,MAZwB,yBAQd,oEAAsE6E,EAAuB,iBAAmB5H,EAAM4C,sBAAwB,mBAIvH6F,EAFR,UAK7B,OAAOtE,EAAcpB,GAI7B,OAAO6B,EAAc7B,MAOjC2F,QAAU,EACVC,QA1LJ,SAAyBC,GAGrB,IAAIC,EAAgBC,IAChBC,EAAgBC,SAASC,eAAe,UAAUC,aAClDC,EAAgBH,SAASC,eAAe,UAAUC,aAGtD,OAFmB1C,SAASoC,GAAUC,EAAgBE,EAAgBI,EAAgB,KAoL3EC,CAAgBpJ,EAAMgB,SAEjCqI,WAAcrJ,EAAMY,gBACpB0I,OAnUmB5I,EAmUIV,EAAMU,cAnUKC,EAmUUX,EAAMW,aAlU7B,SAAjBD,EACO,IAAIyF,OAEEhD,EAA8BzC,GACrBC,IA+T1B4I,QAvTJ,WACI,IAAIC,KACJ,IAAK,IAAIxF,EAAI,EAAGA,EAAIjB,EAAKG,KAAKuG,aAAatE,OAAOxB,OAAQK,IACtDwF,EAAYvF,MAAOyF,MAAS3G,EAAKG,KAAKuG,aAAatE,OAAOnB,KAG9D,OAAOwF,EAiTEG,GACTC,UACIC,IAAO,0DAEXC,aAAgB,SAASC,GACjB/J,EAAMU,eAENqE,EAAE,0BAA0BiF,IAAI,aAAchK,EAAMiB,gBA3UhE,IAAuBP,EAAeC,EAkYtC,SAASmI,IAkBL,OAhBsB,GAAlB9I,EAAMG,UACN4E,EAAE,WAAWiF,IAAI,UAAW,SAC5BjF,EAAE,eAAekF,KAAKjK,EAAMI,YAC5B2E,EAAE,eAAekF,KAAKjK,EAAMK,YAE5B0E,EAAE,eAAeiF,IAAI,YAAahK,EAAMM,uBACxCyE,EAAE,eAAeiF,IAAI,YAAahK,EAAMO,uBAExCwE,EAAE,eAAeiF,IAAI,cAAehK,EAAMQ,oBAC1CuE,EAAE,eAAeiF,IAAI,cAAehK,EAAMS,qBAG1CsE,EAAE,WAAWiF,IAAI,UAAW,QAGZhB,SAASC,eAAe,UAAUC,aAxD1DnE,EAAE,aAAamF,GAAG,QAAS,WACJlK,EAAMqC,cACcsB,OAAS,GAIrB,EACvBoB,EAAE,YAAYoF,YAAYZ,QAAQpG,EAA8BnD,EAAMqC,gBAAgB+H,OAAOC,KAAKC,OAAOC,OAGzGxF,EAAE,YAAYoF,YAAYC,OAAOC,KAAKC,OAAOC,SAQ5CvK,EAAMe,cACPgE,EAAE,aAAayF,SAgBvBC,OAAOC,QANH3F,EAAE,6BAA6BiF,IAAI,YAAahK,EAAMC,gBACtD8E,EAAE,6BAA6BiF,IAAI,YAAahK,EAAMC,gBACtD8E,EAAE,6BAA6BiF,IAAI,YAAahK,EAAMC,qBACtD8E,EAAE,8BAA8BiF,IAAI,YAAahK,EAAMC,iBA4B3D6I,IAKQ9I,EAAMsC,QACNyC,EAAE,WAAWkF,KAAKjK,EAAMsC,QAUhCyC,EAAE,0BAA0B4F,KAAK,WAC7BN,KAAKO,SAAW,mDCloBxB,WAEI5H"}