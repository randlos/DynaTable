{"version":3,"file":"template.js","sources":["src/state.js","src/data.js","src/update.js","src/draw.js"],"sourcesContent":["\nlet state = {\n  \n    // Tabellen-Optionen:\n    sortingColumn: \"A\",\n    sortingOrder: \"asc\",\n    numberOfEntries: 10,\n  \n\n    // Reload\n    reload: 1,\n\n    // DOM-Layout Tabelle\n    layout: 'pitr',\n\n   // Scrolling y\n    yscroll: '500px',\n\n   // Color-Change\n    headerColor: '#dadada',\n\n    // Haupt-Farben\n    Haupt_Farbe: \"rgba(211, 45, 32, 1)\",\n    Green: '#6CBA6C',\n    darkGreen: '#45891B',\n    Blue: '#42A8CC',\n    darkBlue: '#036E93',\n  \n    // BG-Farben\n    Background_Transparent: \"transparent\",\n    Background_Color_Haupt_opacity: \"rgba(211, 45, 32, 0.5)\",\n  \n    // Partei-Farben\n  \n    cdu_csu_farbe: '#143d4b',\n    cdu_farbe: '#162129',\n    csu_farbe: '#1782d1',\n    spd_farbe: '#e0341f',\n    afd_farbe: '#00b8e3',\n    fdp_farbe: '#f4d50b',\n    gruene_farbe: '#3bae53',\n    dielinke_farbe: '#a00163',\n    sonstige_parteien_farbe: '#c5cad0',\n    nichtwahler_farbe: '#dce1e0',\n    \n\n\n   // Images Options\n\n   imgsize: [100, 150],\n\n   // Bar-Chart-Feature\n   bar_switch: true,\n   bar_column: \"E\", //['D','C'],//'D',//\n\n   };\n\n   export default state;","var data = {};\nexport default data;","\nimport state from \"./state\";\nimport data from \"./data\";\n\n\nimport {numconvert} from './numberConversion.js';\n\n\nfunction update() {\n    \n/*     function sortingOrderTranlsate(order) {\n        if (state.sortingOrder == \"Aufsteigend\") {\n            state.sortingOrder = \"asc\";\n            return state.sortingOrder;\n        }\n    \n        else if (state.sortingOrder == \"Absteigend\"){\n            state.sortingOrder = \"desc\";\n            return state.sortingOrder;\n        }\n        else {\n            return state.sortingOrder;\n        }\n\n    } */\n\n    function reloadTable(variable) {\n        \n        table.ajax.reload();\n        return variable;\n    }\n\n    let database = data.Data;\n\n    function maxValue(column) {\n        let exp_column = column;\n        let scope_data = database;\n        //console.log(scope_data);\n\n        let dataArray = new Array();\n        \n        scope_data.forEach(function(item, index, array) {\n            \n                // GET THE LAST ITEM (LAST COLUMN CELL) IN A ARRAY\n                //console.log(item.values.slice(-1)[0], index);\n    \n                // Get the active column for bar-charts in Characters, convert it to a number and get the max value of that column\n                \n                //console.log(\"Bar Column: \" + exp_column);\n\n                let valueToConsider = item.values.slice(exp_column)[0];\n                dataArray.push(valueToConsider);\n                //console.log(valueToConsider)\n    \n            });\n\n         \n        let maxVal = Math.max.apply(Math, dataArray);\n        //console.log(\"DataArray: \" + dataArray);\n\n        return maxVal;\n    }\n\n    // let maxVal = maxValue(3);\n    // console.log(\"MAX Value 4.Column: \" + maxVal);\n\n    //console.log(\"Max Value: \" + maxVal);\n\n    //console.log(data.Data.values[tranlsateSortingAlphaToNumber(state.bar_column]));\n   \n    // function balken(data) {\n        \n    //     // let chart = d3.select(\"body\")//d3.select(\"td:nth-last-child(1)\")\n    //     // .append(\"svg\")\n    //     // .attr(\"class\", \"barchart\")\n    //     // .attr(\"width\", \"100%\")\n    //     // .attr(\"height\", \"70%\");\n      \n\n    //     // let bar = chart.select(\"g\")\n    //     // .data(data)    \n    //     // .enter()\n    //     // .append(\"g\");\n        \n        \n    //     let bar = d3.append(\"rect\")\n    //     .attr(\"width\", function(d) { return 100/d + \"%\"}) //function(d) { return (d/(d3.sum(data)))*100 + \"%\"; } )   // function(d) { return d + \"%\"})\n    //     .attr(\"x\", \"0\")\n    //     .attr(\"y\", \"50%\")\n    //     .attr(\"height\", \"80%\")\n    //     .attr(\"fill\", \"#000\");\n    // }\n\n    // function getOrderedColumn(table) {\n    //     let order = table.order();\n    //     //console.log(order);\n    //     return order;\n    // }\n\n    \n    function tranlsateSortingAlphaToNumber(alpha) {\n        //console.log(alpha[0]);\n\n        let barchart_column;\n        let columnArray = [];\n\n        let alphaList = [{number:1, string:'A'},\n                         {number:2, string:'B'},\n                         {number:3, string:'C'},\n                         {number:4, string:'D'},\n                         {number:5, string:'E'},\n                         {number:6, string:'F'},\n                         {number:7, string:'G'},\n                         {number:8, string:'H'},\n                         {number:9, string:'I'},\n                         {number:10, string:'J'},\n                         {number:11, string:'K'},\n                         {number:12, string:'L'},\n                         {number:13, string:'M'},\n                         {number:14, string:'N'},\n                         {number:15, string:'O'},\n                         {number:16, string:'P'},\n                         {number:17, string:'Q'},\n                         {number:18, string:'R'},\n                         {number:19, string:'S'},\n                         {number:20, string:'T'},\n                         {number:21, string:'U'},\n                         {number:22, string:'V'},\n                         {number:23, string:'W'},\n                         {number:24, string:'X'},\n                         {number:25, string:'Y'},\n                         {number:26, string:'Z'}\n                        ];\n        \n        if(typeof alpha == 'object') {\n            //console.log(\"Alpha Array? \" + typeof alpha);\n\n            for (let key in alpha) {\n                //console.log(alpha[key]);     \n                let i;\n                for (i=0; i < alphaList.length; i++) {\n                    if (alphaList[i].string == alpha[key]) {\n                        //console.log(\"Output:\" + typeof(alphaList[i].number));\n                        columnArray.push(alphaList[i].number -1);\n                    };             \n                }\n            }\n                //console.log(\"Column Array: \" + \"[\"+columnArray+\"]\");\n                return columnArray;\n        }\n\n        else {\n            let i;\n            //console.log(\"alpha-Input: \" + alpha);\n            for (i=0; i < alphaList.length; i++) {\n                if (alphaList[i].string == alpha) {\n                    //console.log(\"Output:\" + alphaList[i].number);\n                    barchart_column = alphaList[i].number -1;\n                    return barchart_column;\n                };\n            }; \n        }\n\n          \n    }\n\n    //console.log(\"Spaltenzahl: \" + tranlsateSortingAlphaToNumber(state.bar_column));\n\n\n    function c_names() {\n        let column_data = [];\n        for(var i=0; i<data.Data.column_names.values.length; i++){\n            column_data.push({\"title\": data.Data.column_names.values[i]});     \n        };\n        //console.log(column_data);\n        return column_data;\n    }\n    \n    \n    function colorMapBalken(data, maxVal) {\n\n        let color = d3.scale.linear()\n        .domain([0,maxVal])\n        .range([\"green\", \"red\"]);\n\n        return color(data);\n\n    }\n\n    // let colortestdata = [2,4,7,8,14,55,66,99];\n    // console.log(colortestdata.length);\n    // console.log(colorMapBalken(colortestdata));\n   \n    \n    let table = $('#myTable').dataTable( {\n        data: data.Data.map(e => e.values),\n        responsive: {\n            details: true,\n            breakpoints: [\n                { name: 'stationÃ¤r', width: Infinity },\n                { name: 'mobil',  width: 705 },\n            ]\n        },\n        colReorder: {\n            enable: true,\n        //     order: [ 5, 4, 3, 2, 1, 0 ],\n        //     realtime: false,\n\n        },\n        // \"drawCallback\": function( settings ) {\n        //     let api = this.api();\n        //     // console.log( api.rows( {page:'current'} ).data() );\n        //     //console.log(api.columns( {page:'current'}).data());\n        //     //var api = new $.fn.dataTable.Api( settings );\n \n            \n        //     // Output the data for the visible rows to the browser's console\n        //     // You might do something more useful with it!\n        //     //console.log(api.search);\n        //     //console.log( api.rows( {page:'current'} ).data().table );\n            \n        //     // $('#mySearch').on( 'keyup', function () {\n        //     //     table.search( this.value );\n        //     // } );\n        // },\n        \"dom\": state.layout,\n        // buttons: [\n        //     {\n        //         extend: 'columnsToggle',\n        //     }\n        // ],\n        //responsive: true,\n        //\"autoWidth\": true,\n        \"columnDefs\" : [{\n            \"targets\": 0,\n            \"data\": 0,\n            \"render\": function ( data, type, row, meta ) {\n                //console.log(data);\n                if (data.indexOf(\"/\") > -1){\n                    var img_tag = '<img src=\"'+data+'\"height=\"'+state.imgsize[0]+'\"width=\"'+state.imgsize[1]+'\">';\n                    //console.log(data);\n                    return img_tag;\n                }\n                else {\n                    return data;\n                }\n              },\n        },{\n            \"targets\": tranlsateSortingAlphaToNumber(state.bar_column),\n            \"render\": function (data, type, row, meta) {\n                \n                \n                \n                let maxVal = maxValue(meta.col);\n                //console.log(\"Max Value in function: \" + maxVal);\n\n                if (state.bar_switch) {  //\n            \n                    if (!isNaN(data)) {\n                        let pre_bar_container = '<div class=\"barcont\">';\n                        let bartext = '<div class=\"bartext\"><p>' + data + '</p></div>';\n                        let bar = '<div class=\"bar\"><svg class=\"barsvg\" style=\"height:10px;width:' + data/maxVal * 100 + '%; background:' + colorMapBalken(data, maxVal) + ';\"> </svg> </div>';\n                        let post_bar_container = '</div>';\n                        return pre_bar_container + bar + bartext + post_bar_container;\n                    \n                    }\n                    else {\n                        return data;\n                    }\n                }\n                else {\n                    return data;\n                }\n            }\n        }],\n        \"paging\": false,\n        \"scrollY\": state.yscroll,\n        //\"scrollCollapse\": true,\n        \"pageLength\":state.numberOfEntries,\n        \"order\": [tranlsateSortingAlphaToNumber(state.sortingColumn), state.sortingOrder], \n        columns: c_names(),\n        \"language\": {\n            \"url\": \"//cdn.datatables.net/plug-ins/1.10.19/i18n/German.json\"\n        },\n        \"drawCallback\": function ( settings ) {\n\n            // Change Header Color\n            $('.dataTables_scrollHead').css(\"background\", state.headerColor);          \n            //console.log(\"Table reload!\");\n            //console.log(state.headerColor);\n        }\n    });\n\n    // console.log(getOrderedColumn(table));\n\n    $('#mySearch').on( 'keyup', function() {\n        $('#myTable').DataTable().search( this.value ).draw();\n    } );\n\n    // Deactivate Search for Grafik PNG Export\n    function deactivateSearch() {\n        if (state.layout == \"t\") {\n            $('#mySearch').remove();\n        }\n    }\n    \n    deactivateSearch()\n    \n    \n    $(\"iframe[name='preview']\").each(function() {\n        this.sandbox += ' allow-modals';\n    });\n\n}\n\nexport default update;\n","import update from \"./update\";\nimport state from \"./state\";\n\n\nfunction draw() {\n    // The draw function is called when the template first loads\n    update();\n}\n\nexport default draw;"],"names":["state","sortingColumn","sortingOrder","numberOfEntries","reload","layout","yscroll","headerColor","Haupt_Farbe","Green","darkGreen","Blue","darkBlue","Background_Transparent","Background_Color_Haupt_opacity","cdu_csu_farbe","cdu_farbe","csu_farbe","spd_farbe","afd_farbe","fdp_farbe","gruene_farbe","dielinke_farbe","sonstige_parteien_farbe","nichtwahler_farbe","imgsize","bar_switch","bar_column","data","update","database","Data","tranlsateSortingAlphaToNumber","alpha","barchart_column","columnArray","alphaList","number","string","key","i","length","push","$","dataTable","map","e","values","responsive","details","breakpoints","name","width","Infinity","colReorder","enable","dom","columnDefs","targets","render","type","row","meta","indexOf","maxVal","column","exp_column","scope_data","dataArray","Array","forEach","item","index","array","valueToConsider","slice","Math","max","apply","maxValue","col","isNaN","bartext","d3","scale","linear","domain","range","color","colorMapBalken","paging","scrollY","pageLength","order","columns","column_data","column_names","title","c_names","language","url","drawCallback","settings","css","on","DataTable","search","this","value","draw","remove","each","sandbox"],"mappings":"sCACA,IAAIA,GAGAC,cAAe,IACfC,aAAc,MACdC,gBAAiB,GAIjBC,OAAQ,EAGRC,OAAQ,OAGRC,QAAS,QAGTC,YAAa,UAGbC,YAAa,uBACbC,MAAO,UACPC,UAAW,UACXC,KAAM,UACNC,SAAU,UAGVC,uBAAwB,cACxBC,+BAAgC,yBAIhCC,cAAe,UACfC,UAAW,UACXC,UAAW,UACXC,UAAW,UACXC,UAAW,UACXC,UAAW,UACXC,aAAc,UACdC,eAAgB,UAChBC,wBAAyB,UACzBC,kBAAmB,UAMpBC,SAAU,IAAK,KAGfC,YAAY,EACZC,WAAY,KCrDf,IAAIC,KCQJ,SAASC,IAwBL,IAAIC,EAAWF,EAAKG,KAoEpB,SAASC,EAA8BC,GAGnC,IAAIC,EACAC,KAEAC,IAAcC,OAAO,EAAGC,OAAO,MACjBD,OAAO,EAAGC,OAAO,MACjBD,OAAO,EAAGC,OAAO,MACjBD,OAAO,EAAGC,OAAO,MACjBD,OAAO,EAAGC,OAAO,MACjBD,OAAO,EAAGC,OAAO,MACjBD,OAAO,EAAGC,OAAO,MACjBD,OAAO,EAAGC,OAAO,MACjBD,OAAO,EAAGC,OAAO,MACjBD,OAAO,GAAIC,OAAO,MAClBD,OAAO,GAAIC,OAAO,MAClBD,OAAO,GAAIC,OAAO,MAClBD,OAAO,GAAIC,OAAO,MAClBD,OAAO,GAAIC,OAAO,MAClBD,OAAO,GAAIC,OAAO,MAClBD,OAAO,GAAIC,OAAO,MAClBD,OAAO,GAAIC,OAAO,MAClBD,OAAO,GAAIC,OAAO,MAClBD,OAAO,GAAIC,OAAO,MAClBD,OAAO,GAAIC,OAAO,MAClBD,OAAO,GAAIC,OAAO,MAClBD,OAAO,GAAIC,OAAO,MAClBD,OAAO,GAAIC,OAAO,MAClBD,OAAO,GAAIC,OAAO,MAClBD,OAAO,GAAIC,OAAO,MAClBD,OAAO,GAAIC,OAAO,MAGpC,GAAmB,iBAATL,EAAmB,CAGzB,IAAK,IAAIM,KAAON,EAAO,CAEnB,IAAIO,EACJ,IAAKA,EAAE,EAAGA,EAAIJ,EAAUK,OAAQD,IACxBJ,EAAUI,GAAGF,QAAUL,EAAMM,IAE7BJ,EAAYO,KAAKN,EAAUI,GAAGH,OAAQ,GAK9C,OAAOF,EAGV,CACD,IAAIK,EAEJ,IAAKA,EAAE,EAAGA,EAAIJ,EAAUK,OAAQD,IAC5B,GAAIJ,EAAUI,GAAGF,QAAUL,EAGvB,OADAC,EAAkBE,EAAUI,GAAGH,OAAQ,GAqC3CM,EAAE,YAAYC,WACtBhB,KAAMA,EAAKG,KAAKc,IAAIC,GAAKA,EAAEC,QAC3BC,YACIC,SAAS,EACTC,cACMC,KAAM,YAAaC,MAAOC,EAAAA,IAC1BF,KAAM,QAAUC,MAAO,OAGjCE,YACIC,QAAQ,GAqBZC,IAAOxD,EAAMK,OAQboD,aACIC,QAAW,EACX9B,KAAQ,EACR+B,OAAU,SAAW/B,EAAMgC,EAAMC,EAAKC,GAElC,OAAIlC,EAAKmC,QAAQ,MAAQ,EACP,aAAanC,EAAK,YAAY5B,EAAMyB,QAAQ,GAAG,WAAWzB,EAAMyB,QAAQ,GAAG,KAKlFG,KAIf8B,QAAW1B,EAA8BhC,EAAM2B,YAC/CgC,OAAU,SAAU/B,EAAMgC,EAAMC,EAAKC,GAIjC,IAAIE,EA3NhB,SAAkBC,GACd,IAAIC,EAAaD,EACbE,EAAarC,EAGbsC,EAAY,IAAIC,MAqBpB,OAnBAF,EAAWG,QAAQ,SAASC,EAAMC,EAAOC,GASjC,IAAIC,EAAkBH,EAAKxB,OAAO4B,MAAMT,GAAY,GACpDE,EAAU1B,KAAKgC,KAMVE,KAAKC,IAAIC,MAAMF,KAAMR,GAoMbW,CAASjB,EAAKkB,KAG3B,GAAIhF,EAAM0B,WAAY,CAElB,GAAKuD,MAAMrD,GASP,OAAOA,EATO,CACd,IACIsD,EAAU,2BAA6BtD,EAAO,aAGlD,MAJwB,yBAEd,iEAAmEA,EAAKoC,EAAS,IAAM,iBAlFrH,SAAwBpC,EAAMoC,GAM1B,OAJYmB,GAAGC,MAAMC,SACpBC,QAAQ,EAAEtB,IACVuB,OAAO,QAAS,OAEVC,CAAM5D,GA4EuH6D,CAAe7D,EAAMoC,GAAU,qBAElHkB,EADR,UAS7B,OAAOtD,KAInB8D,QAAU,EACVC,QAAW3F,EAAMM,QAEjBsF,WAAa5F,EAAMG,gBACnB0F,OAAU7D,EAA8BhC,EAAMC,eAAgBD,EAAME,cACpE4F,QA/GJ,WACI,IAAIC,KACJ,IAAI,IAAIvD,EAAE,EAAGA,EAAEZ,EAAKG,KAAKiE,aAAajD,OAAON,OAAQD,IACjDuD,EAAYrD,MAAMuD,MAASrE,EAAKG,KAAKiE,aAAajD,OAAOP,KAG7D,OAAOuD,EAyGEG,GACTC,UACIC,IAAO,0DAEXC,aAAgB,SAAWC,GAGvB3D,EAAE,0BAA0B4D,IAAI,aAAcvG,EAAMO,gBAQ5DoC,EAAE,aAAa6D,GAAI,QAAS,WACxB7D,EAAE,YAAY8D,YAAYC,OAAQC,KAAKC,OAAQC,SAK3B,KAAhB7G,EAAMK,QACNsC,EAAE,aAAamE,SAOvBnE,EAAE,0BAA0BoE,KAAK,WAC7BJ,KAAKK,SAAW,mDClTxB,WAEInF"}